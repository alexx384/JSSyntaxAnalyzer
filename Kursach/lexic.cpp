#line 2 "lexic.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
static yyconst short int yy_accept[362] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  128,  126,
      123,  125,   81,    4,   78,  110,  102,    3,  117,  118,
      108,  111,  114,  112,  113,  109,    2,  115,  124,   84,
       99,   85,  116,  119,  120,  103,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,  121,  101,  122,  100,   17,   16,   17,    8,
        7,    5,    8,   12,   11,    9,   12,   80,   78,   78,
       77,   95,   82,   96,    0,   93,  106,   90,  107,   91,
        2,   14,   13,   94,    2,    2,    0,  104,   86,   79,
       87,  105,   98,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   31,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   44,   78,   47,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   97,   83,   15,    6,
       10,   80,   92,   13,   13,    2,    0,    2,  104,   89,
       79,   88,  105,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   41,   78,   78,   78,   78,   49,
       78,   78,   53,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   70,   78,

       72,   78,   78,   78,   78,   78,   78,   78,   21,   22,
       78,   24,   78,   78,   78,   78,   78,   78,   78,   78,
       33,   34,   78,   78,   78,   78,   78,   78,   43,   78,
       78,   78,   78,   51,   78,   54,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   65,   78,   78,   69,
       78,   73,   78,   78,   76,   78,   78,   20,   23,   25,
       26,   78,   78,   78,   78,    1,   78,   78,   78,   37,
       38,   40,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   60,   78,   62,   78,   78,   66,   78,
       78,   78,   75,   78,   78,   78,   78,   78,   30,   32,

       35,   78,   78,   78,   78,   46,   78,   78,   52,   78,
       78,   78,   58,   59,   61,   63,   78,   67,   78,   71,
       78,   78,   19,   78,   78,   29,   36,   39,   78,   78,
       78,   78,   55,   56,   78,   78,   78,   78,   18,   27,
       28,   42,   78,   78,   78,   78,   78,   78,   74,   78,
       78,   50,   57,   78,   68,   45,   48,   78,   78,   64,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,    6,    6,    6,    6,   25,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
       26,   27,   28,   29,    6,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,    6,   39,   40,   41,   42,
       43,   44,    6,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[368] =
    {   0,
        0,    0,   55,   56,   57,   60,   59,   67,  248, 1031,
     1031, 1031,  221, 1031,   55,  209,   53, 1031, 1031, 1031,
       59,   63, 1031,   67,  208,   66,   74, 1031, 1031,   58,
      200,   73, 1031, 1031, 1031,  195,   79,   82,   86,   94,
       96,  103,   88,  126,   99,  130,  135,  101,  137,  151,
      163,   84, 1031,   69, 1031, 1031, 1031, 1031,  190, 1031,
     1031, 1031,  193, 1031, 1031, 1031,  189,  169,  139,  158,
     1031, 1031, 1031, 1031,  150, 1031, 1031, 1031, 1031, 1031,
      141, 1031,  149, 1031,  161,  174,  158,  141, 1031,  128,
     1031,  175, 1031,  182,  186,  191,  193,  195,  197,  200,

      202,  214,  216,  205,  218,  220,  228,  237,  232,  239,
      241,  243,  247,  251,  260,  262,  265,  269,  271,  273,
      278,  280,  283,  287,  293,  301,  306,  308,  310,  319,
      314,  321,  323,  329,  335,  337, 1031, 1031, 1031, 1031,
     1031, 1031, 1031,  136, 1031,  345,  112,   93,   87, 1031,
     1031, 1031,   71,  340,  342,  353,  356,  358,  362,  367,
      370,  377,  379,  381,  383,  387,  389,  385,  391,  395,
      403,  410,  412,  415,  417,  421,  425,  429,  431,  433,
      439,  436,  441,  443,  445,  447,  452,  458,  461,  463,
      467,  469,  471,  473,  475,  482,  488,  492,  494,  497,

      501,  504,  509,  514,  516,  522,  524,  526,  528,  530,
      532,  537,  541,  543,  545,  552,  554,  556,  558,  560,
      562,  566,  573,  575,  577,  579,  588,  590,  594,  596,
      602,  604,  606,  608,  610,  613,  620,  622,  624,  626,
      630,  635,  638,  642,  647,  644,  649,  651,  653,  655,
      659,  665,  667,  670,  672,  675,  677,  679,  690,  692,
      694,  697,  699,  701,  703,  705,  708,  710,  712,  714,
      725,  728,  730,  732,  734,  736,  740,  742,  744,  748,
      751,  753,  768,  770,  772,  774,  778,  780,  782,  784,
      788,  793,  790,  795,  798,  800,  802,  811,  814,  816,

      819,  823,  825,  827,  831,  833,  835,  838,  841,  844,
      853,  855,  857,  861,  863,  865,  867,  870,  872,  874,
      876,  878,  880,  885,  882,  889,  893,  895,  899,  902,
      904,  910,  912,  914,  916,  918,  921,  927,  929,  933,
      935,  937,  939,  946,  948,  950,  952,  954,  956,  958,
      960,  962,  966,  969,  973,  975,  978,  980,  984,  987,
     1031, 1022, 1024, 1026,   75,   63, 1028
    } ;

static yyconst short int yy_def[368] =
    {   0,
      361,    1,  362,  362,  363,  363,  364,  364,  361,  361,
      361,  361,  361,  361,  365,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  365,  365,  365,  365,
      365,   39,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  365,  366,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  367,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  361,  361,  361,  361,
      361,  361,  361,  367,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
        0,  361,  361,  361,  361,  361,  361
    } ;

static yyconst short int yy_nxt[1089] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   15,   34,   10,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   15,   44,   15,   45,
       15,   46,   15,   47,   48,   49,   50,   15,   51,   52,
       15,   15,   15,   53,   54,   55,   56,   58,   58,   61,
       73,   65,   61,   66,   70,   62,   59,   59,   62,   65,
       75,   66,   70,   71,   74,   77,   69,   82,   88,   89,
       76,   79,   83,   63,   78,   67,   63,   84,   80,   85,
      137,   86,  152,   67,   91,   92,   70,   71,   87,   70,

       71,   70,   71,   70,   71,   70,   71,   87,  150,   94,
      148,   70,   71,   70,   71,   98,   70,   71,   70,   71,
      135,  136,   99,  138,   95,  100,   96,  102,  101,  148,
      113,  103,  108,   97,  124,  105,  104,  106,  145,   69,
      109,  117,  110,   70,   71,  111,  107,   70,   71,  151,
      112,  145,   70,   71,   70,   71,   70,   71,   81,  118,
      114,  149,  150,  119,  121,   87,  115,  116,   70,   71,
      147,  143,  147,  125,   87,  148,   71,  120,  146,  122,
       70,   71,  123,  126,  127,   87,  128,  130,  129,   85,
      142,   86,  133,  141,   87,  131,  152,  153,   87,   70,

       71,  140,  132,   70,   71,  134,  139,   87,   70,   71,
       70,   71,   70,   71,   70,   71,   93,   70,   71,   70,
       71,   90,   70,   71,  156,   81,  160,  154,  155,  161,
       72,   70,   71,   70,   71,   70,   71,   70,   71,  157,
      158,  159,   68,  162,  163,   70,   71,  361,  164,   70,
       71,  166,  167,  165,   70,   71,   70,   71,   70,   71,
       70,   71,  361,  168,   70,   71,  361,  169,   70,   71,
      361,  170,  361,  173,  171,  361,  172,   70,   71,   70,
       71,  174,   70,   71,  176,  175,   70,   71,   70,   71,
       70,   71,  361,  177,  361,   70,   71,   70,   71,  361,

       70,   71,  361,  178,   70,   71,  181,  179,  180,  185,
       70,   71,  184,  188,  361,  182,  361,  186,   70,   71,
      183,  361,  187,   70,   71,   70,   71,   70,   71,  361,
      191,   70,   71,  189,  361,  190,   70,   71,   70,   71,
       70,   71,  361,  197,  361,  193,   70,   71,  361,  192,
      361,  194,   70,   71,   70,   71,  195,   70,   71,   70,
       71,  198,  146,  196,  200,  199,  202,  201,  203,   87,
       70,   71,  204,   70,   71,   70,   71,  361,   87,   70,
       71,  207,  208,  205,   70,   71,  206,   70,   71,  209,
      361,  210,  361,  211,   70,   71,   70,   71,   70,   71,

       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
      217,  212,   70,   71,  361,  213,  218,  361,  221,  220,
       70,   71,  214,  215,  219,  361,  216,   70,   71,   70,
       71,  222,   70,   71,   70,   71,  224,  223,   70,   71,
      361,  226,   70,   71,  227,  361,   70,   71,   70,   71,
       70,   71,  228,   70,   71,  225,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,  233,  229,  230,   70,
       71,  231,  361,  235,  234,   70,   71,  232,   70,   71,
       70,   71,  236,  237,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,  361,  238,  361,  240,  239,   70,

       71,  361,  244,  361,  246,   70,   71,  242,  241,   70,
       71,   70,   71,  243,   70,   71,  361,  245,   70,   71,
      247,   70,   71,  361,  248,  250,   70,   71,  361,  249,
      251,   70,   71,   70,   71,  361,  252,  361,  253,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,  361,  255,  254,   70,   71,  361,  257,   70,   71,
       70,   71,   70,   71,  258,  361,  256,  361,  259,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,  361,  262,   70,   71,  361,  260,  263,  361,  261,
       70,   71,   70,   71,   70,   71,   70,   71,  361,  267,

      361,  264,  265,  361,  266,   70,   71,   70,   71,  361,
      270,   70,   71,   70,   71,  361,  269,  268,  271,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,  274,
       70,   71,  361,  276,  272,  361,  273,   70,   71,   70,
       71,   70,   71,   70,   71,  361,  275,   70,   71,  279,
      277,  280,   70,   71,  361,   70,   71,  281,  278,   70,
       71,   70,   71,  282,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,  283,  285,   70,   71,  287,  361,
      288,  284,   70,   71,   70,   71,  286,   70,   71,   70,
       71,  361,   70,   71,   70,   71,   70,   71,  290,  361,

      289,  291,  361,  293,  294,  361,  295,   70,   71,   70,
       71,   70,   71,  292,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,  361,   70,   71,   70,   71,   70,
       71,   70,   71,  361,  297,  361,  299,  361,  296,  361,
      298,  300,   70,   71,  302,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,  361,  301,   70,   71,   70,
       71,   70,   71,  361,  303,   70,   71,  304,   70,   71,
       70,   71,  305,  361,  308,  309,  361,  307,  361,  310,
      306,  361,  312,  361,  313,   70,   71,   70,   71,   70,
       71,   70,   71,  361,  311,   70,   71,   70,   71,   70,

       71,   70,   71,  315,  361,   70,   71,   70,   71,  314,
       70,   71,   70,   71,  316,   70,   71,   70,   71,   70,
       71,  319,  320,  361,  317,  361,  322,  318,   70,   71,
      321,   70,   71,   70,   71,  325,   70,   71,  361,  323,
       70,   71,   70,   71,   70,   71,  361,  324,   70,   71,
       70,   71,   70,   71,  361,   70,   71,  326,   70,   71,
      361,   70,   71,  361,  330,  361,  331,  332,  327,  329,
       70,   71,   70,   71,   70,   71,  328,  333,   70,   71,
       70,   71,   70,   71,   70,   71,  334,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,

       71,  335,   70,   71,  361,  337,   70,   71,  361,  336,
       70,   71,   70,   71,  361,  338,   70,   71,  340,   70,
       71,   70,   71,  361,  339,  361,  341,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,  344,   70,   71,
      342,  345,  361,  343,   70,   71,   70,   71,  361,  346,
       70,   71,   70,   71,   70,   71,   70,   71,  361,  347,
      349,  361,  348,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,  352,  353,   70,   71,  350,   70,   71,  351,  354,
       70,   71,   70,   71,  357,   70,   71,   70,   71,  361,

      355,   70,   71,  356,   70,   71,  361,  361,  361,  361,
      361,  361,  361,  359,  361,  361,  360,  361,  361,  361,
      361,  358,   57,   57,   60,   60,   64,   64,  144,  144,
        9,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361
    } ;

static yyconst short int yy_chk[1089] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
       17,    7,    6,    7,  366,    5,    3,    4,    6,    8,
       21,    8,   15,   15,   17,   22,  365,   26,   30,   30,
       21,   24,   26,    5,   22,    7,    6,   26,   24,   27,
       54,   27,  153,    8,   32,   32,   37,   37,   27,   38,

       38,   52,   52,   39,   39,   43,   43,   27,  149,   37,
      148,   40,   40,   41,   41,   39,   45,   45,   48,   48,
       52,   52,   39,   54,   38,   39,   38,   40,   39,  147,
       43,   40,   42,   38,   48,   41,   40,   41,  144,   42,
       42,   45,   42,   44,   44,   42,   41,   46,   46,   90,
       42,   83,   47,   47,   49,   49,   69,   69,   81,   46,
       44,   88,   88,   46,   47,   81,   44,   44,   50,   50,
       87,   75,   87,   49,   81,   87,   70,   46,   85,   47,
       51,   51,   47,   49,   49,   85,   49,   50,   49,   86,
       68,   86,   51,   67,   85,   50,   92,   92,   86,   94,

       94,   63,   50,   95,   95,   51,   59,   86,   96,   96,
       97,   97,   98,   98,   99,   99,   36,  100,  100,  101,
      101,   31,  104,  104,   96,   25,   99,   94,   95,  100,
       16,  102,  102,  103,  103,  105,  105,  106,  106,   97,
       98,   98,   13,  101,  102,  107,  107,    9,  102,  109,
      109,  103,  104,  102,  108,  108,  110,  110,  111,  111,
      112,  112,    0,  105,  113,  113,    0,  106,  114,  114,
        0,  107,    0,  109,  107,    0,  108,  115,  115,  116,
      116,  110,  117,  117,  112,  111,  118,  118,  119,  119,
      120,  120,    0,  113,    0,  121,  121,  122,  122,    0,

      123,  123,    0,  115,  124,  124,  117,  116,  116,  121,
      125,  125,  120,  123,    0,  118,    0,  122,  126,  126,
      119,    0,  122,  127,  127,  128,  128,  129,  129,    0,
      126,  131,  131,  124,    0,  125,  130,  130,  132,  132,
      133,  133,    0,  131,    0,  128,  134,  134,    0,  127,
        0,  129,  135,  135,  136,  136,  130,  154,  154,  155,
      155,  131,  146,  130,  132,  131,  134,  133,  134,  146,
      156,  156,  135,  157,  157,  158,  158,    0,  146,  159,
      159,  155,  156,  136,  160,  160,  154,  161,  161,  157,
        0,  158,    0,  159,  162,  162,  163,  163,  164,  164,

      165,  165,  168,  168,  166,  166,  167,  167,  169,  169,
      164,  160,  170,  170,    0,  161,  165,    0,  168,  167,
      171,  171,  162,  162,  166,    0,  163,  172,  172,  173,
      173,  169,  174,  174,  175,  175,  171,  170,  176,  176,
        0,  173,  177,  177,  174,    0,  178,  178,  179,  179,
      180,  180,  176,  182,  182,  172,  181,  181,  183,  183,
      184,  184,  185,  185,  186,  186,  180,  177,  178,  187,
      187,  178,    0,  182,  181,  188,  188,  179,  189,  189,
      190,  190,  184,  185,  191,  191,  192,  192,  193,  193,
      194,  194,  195,  195,    0,  186,    0,  188,  187,  196,

      196,    0,  192,    0,  194,  197,  197,  190,  189,  198,
      198,  199,  199,  191,  200,  200,    0,  193,  201,  201,
      195,  202,  202,    0,  196,  198,  203,  203,    0,  197,
      200,  204,  204,  205,  205,    0,  202,    0,  203,  206,
      206,  207,  207,  208,  208,  209,  209,  210,  210,  211,
      211,    0,  205,  204,  212,  212,    0,  207,  213,  213,
      214,  214,  215,  215,  208,    0,  206,    0,  211,  216,
      216,  217,  217,  218,  218,  219,  219,  220,  220,  221,
      221,    0,  215,  222,  222,    0,  213,  216,    0,  214,
      223,  223,  224,  224,  225,  225,  226,  226,    0,  220,

        0,  217,  218,    0,  219,  227,  227,  228,  228,    0,
      225,  229,  229,  230,  230,    0,  224,  223,  226,  231,
      231,  232,  232,  233,  233,  234,  234,  235,  235,  230,
      236,  236,    0,  232,  227,    0,  228,  237,  237,  238,
      238,  239,  239,  240,  240,    0,  231,  241,  241,  237,
      233,  238,  242,  242,    0,  243,  243,  239,  235,  244,
      244,  246,  246,  240,  245,  245,  247,  247,  248,  248,
      249,  249,  250,  250,  241,  243,  251,  251,  245,    0,
      246,  242,  252,  252,  253,  253,  244,  254,  254,  255,
      255,    0,  256,  256,  257,  257,  258,  258,  249,    0,

      248,  251,    0,  254,  256,    0,  257,  259,  259,  260,
      260,  261,  261,  253,  262,  262,  263,  263,  264,  264,
      265,  265,  266,  266,    0,  267,  267,  268,  268,  269,
      269,  270,  270,    0,  263,    0,  265,    0,  262,    0,
      264,  267,  271,  271,  269,  272,  272,  273,  273,  274,
      274,  275,  275,  276,  276,    0,  268,  277,  277,  278,
      278,  279,  279,    0,  271,  280,  280,  273,  281,  281,
      282,  282,  274,    0,  277,  278,    0,  276,    0,  279,
      275,    0,  281,    0,  282,  283,  283,  284,  284,  285,
      285,  286,  286,    0,  280,  287,  287,  288,  288,  289,

      289,  290,  290,  285,    0,  291,  291,  293,  293,  283,
      292,  292,  294,  294,  287,  295,  295,  296,  296,  297,
      297,  290,  291,    0,  288,    0,  294,  289,  298,  298,
      292,  299,  299,  300,  300,  297,  301,  301,    0,  295,
      302,  302,  303,  303,  304,  304,    0,  296,  305,  305,
      306,  306,  307,  307,    0,  308,  308,  298,  309,  309,
        0,  310,  310,    0,  305,    0,  307,  308,  302,  304,
      311,  311,  312,  312,  313,  313,  303,  310,  314,  314,
      315,  315,  316,  316,  317,  317,  311,  318,  318,  319,
      319,  320,  320,  321,  321,  322,  322,  323,  323,  325,

      325,  312,  324,  324,    0,  319,  326,  326,    0,  317,
      327,  327,  328,  328,    0,  321,  329,  329,  324,  330,
      330,  331,  331,    0,  322,    0,  325,  332,  332,  333,
      333,  334,  334,  335,  335,  336,  336,  331,  337,  337,
      329,  332,    0,  330,  338,  338,  339,  339,    0,  335,
      340,  340,  341,  341,  342,  342,  343,  343,    0,  336,
      338,    0,  337,  344,  344,  345,  345,  346,  346,  347,
      347,  348,  348,  349,  349,  350,  350,  351,  351,  352,
      352,  345,  346,  353,  353,  343,  354,  354,  344,  347,
      355,  355,  356,  356,  351,  357,  357,  358,  358,    0,

      348,  359,  359,  350,  360,  360,    0,    0,    0,    0,
        0,    0,    0,  358,    0,    0,  359,    0,    0,    0,
        0,  354,  362,  362,  363,  363,  364,  364,  367,  367,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lexic.l"
#define INITIAL 0
#line 2 "lexic.l"
	//Defines and includes
	#include "parse.cpp.h"
	#include "KurCommon.h"
	#include <io.h>

	#include <malloc.h>
	#include <stdarg.h>

	#define YY_NO_UNISTD_H
#define long_comment 1

#define const_string1 2

#define const_string2 3

#line 29 "lexic.l"
	//yytext : a character array that contains the actual string that matched a pattern.
	//yyleng : the no. of characters matched.
	
	YYSTATPOS g_yypos;
	
	// update global position
	#define UP 		g_yypos.incLinePos(yyleng);
	
	// update position after new line
	#define UPNL 	g_yypos.nextLine();
	
	#define DEBUGLEX

	#ifdef DEBUGLEX
		#define DL(x) std::cout << #x << std::endl;
	#elif
		#define DL(x)
	#endif
#line 758 "lexic.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 49 "lexic.l"


#line 908 "lexic.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 362 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1031 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 51 "lexic.l"
/* integer number */ {
	UP DL(INT_NUM);	return INT_NUM;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "lexic.l"
/* Float number */ {
UP
DL(LITERAL_NUMBER);
return LITERAL_NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 64 "lexic.l"
/* Const string */	{ UP DL(const_string1); BEGIN(const_string1); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 65 "lexic.l"
/* Const string */	{ UP DL(const_string2); BEGIN(const_string2); }
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 69 "lexic.l"
{ UP BEGIN(0); return CSTRING; 							}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 70 "lexic.l"
{ UP /* escape character*/								}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 71 "lexic.l"
{ UPNL; yyerror("Next line but no end ' symbol found\n"); 	}
	YY_BREAK
case YY_STATE_EOF(const_string1):
#line 72 "lexic.l"
{ yyerror("EOF but no end ' symbol found\n"); 				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "lexic.l"
{ UP /*ignore*/ 											}
	YY_BREAK



case 9:
YY_RULE_SETUP
#line 78 "lexic.l"
{ UP BEGIN(0); return CSTRING;							}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "lexic.l"
{ UP /* escape character*/								}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "lexic.l"
{ UPNL; yyerror("Next line but no end \" symbol found\n");	}
	YY_BREAK
case YY_STATE_EOF(const_string2):
#line 81 "lexic.l"
{ yyerror("EOF but no end \" symbol found\n");				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "lexic.l"
{ UP /*ignore*/ 											}
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 87 "lexic.l"
/* Comments: single line comment */ {
UPNL; DL(single line comment); 
/* ignore */
}	
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 92 "lexic.l"
/* Comments: multiple line comment */ { UP BEGIN(long_comment); }
	YY_BREAK


case 15:
YY_RULE_SETUP
#line 96 "lexic.l"
{ UP BEGIN(0); 								}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "lexic.l"
{ UPNL; 										}
	YY_BREAK
case YY_STATE_EOF(long_comment):
#line 98 "lexic.l"
{ yyerror("EOF but no end */ symbol found\n");	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 99 "lexic.l"
{ UP /*ignore*/ 								}
	YY_BREAK

case 18:
YY_RULE_SETUP
#line 103 "lexic.l"
/* JZ reserved word */ 	{ UP DL(ABSTRACT); return ABSTRACT; 	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 104 "lexic.l"
/* JZ reserved word */	{ UP DL(BOOLEAN); return BOOLEAN; 		}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 105 "lexic.l"
/* JZ reserved word */  { UP DL(BREAK); return BREAK; 		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 106 "lexic.l"
/* JZ reserved word */  { UP DL(BYTE); return BYTE; 		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 107 "lexic.l"
/* JZ reserved word */  { UP DL(CASE); return CASE; 		}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 108 "lexic.l"
/* JZ reserved word */  { UP DL(CATCH); return CATCH; 		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 109 "lexic.l"
/* JZ reserved word */  { UP DL(CHAR); return CHAR; 		}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 110 "lexic.l"
/* JZ reserved word */  { UP DL(CLASS); return CLASS; 		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 111 "lexic.l"
/* JZ reserved word */  { UP DL(CONST); return CONST; 		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 112 "lexic.l"
/* JZ reserved word */  { UP DL(CONTINUE); return CONTINUE; 	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 113 "lexic.l"
/* JZ reserved word */  { UP DL(DEBUGGER); return DEBUGGER; 	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 114 "lexic.l"
/* JZ reserved word */  { UP DL(DEFAULT); return DEFAULT; 		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 115 "lexic.l"
/* JZ reserved word */  { UP DL(DELETE); return DELETE; 		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 116 "lexic.l"
/* JZ reserved word */  { UP DL(DO); return DO; 			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 117 "lexic.l"
/* JZ reserved word */  { UP DL(DOUBLE); return DOUBLE; 		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 118 "lexic.l"
/* JZ reserved word */  { UP DL(ELSE); return ELSE; 		}	
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 119 "lexic.l"
/* JZ reserved word */  { UP DL(ENUM); return ENUM; 		}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 120 "lexic.l"
/* JZ reserved word */  { UP DL(EXPORT); return EXPORT; 		}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 121 "lexic.l"
/* JZ reserved word */  { UP DL(EXTENDS); return EXTENDS; 		}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 122 "lexic.l"
/* JZ reserved word */  { UP DL(FALSE); return FALSE; 		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 123 "lexic.l"
/* JZ reserved word */  { UP DL(FINAL); return FINAL; 		}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 124 "lexic.l"
/* JZ reserved word */  { UP DL(FINALLY); return FINALLY; 		}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 125 "lexic.l"
/* JZ reserved word */  { UP DL(FLOAT); return FLOAT; 		}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 126 "lexic.l"
/* JZ reserved word */  { UP DL(FOR); return FOR; 			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 127 "lexic.l"
/* JZ reserved word */  { UP DL(FUNCTION); return FUNCTION; 	}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 128 "lexic.l"
/* JZ reserved word */  { UP DL(GOTO); return GOTO; 		}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "lexic.l"
/* JZ reserved word */  { UP DL(IF); return IF; 			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "lexic.l"
/* JZ reserved word */  { UP DL(IMPLEMENTS); return IMPLEMENTS; 	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "lexic.l"
/* JZ reserved word */  { UP DL(IMPORT); return IMPORT; 		}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "lexic.l"
/* JZ reserved word */  { UP DL(IN); return IN; 			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 133 "lexic.l"
/* JZ reserved word */  { UP DL(INSTANCEOF); return INSTANCEOF; 	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 134 "lexic.l"
/* JZ reserved word */  { UP DL(INT); return INT; 			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "lexic.l"
/* JZ reserved word */  { UP DL(INTERFACE); return INTERFACE; 	}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "lexic.l"
/* JZ reserved word */  { UP DL(LONG); return LONG; 		}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "lexic.l"
/* JZ reserved word */  { UP DL(NATIVE); return NATIVE; 		}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "lexic.l"
/* JZ reserved word */  { UP DL(NEW); return NEW; 			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 139 "lexic.l"
/* JZ reserved word */  { UP DL(NUL); return NUL; 			}	
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 140 "lexic.l"
/* JZ reserved word */  { UP DL(PACKAGE); return PACKAGE; 		}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "lexic.l"
/* JZ reserved word */  { UP DL(PRIVATE); return PRIVATE; 		}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "lexic.l"
/* JZ reserved word */  { UP DL(PROTECTED); return PROTECTED; 	}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "lexic.l"
/* JZ reserved word */  { UP DL(PUBLIC); return PUBLIC; 		}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 144 "lexic.l"
/* JZ reserved word */  { UP DL(RETURN); return RETURN; 		}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 145 "lexic.l"
/* JZ reserved word */  { UP DL(SHORT); return SHORT; 		}	
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 146 "lexic.l"
/* JZ reserved word */  { UP DL(STATIC); return STATIC; 		}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 147 "lexic.l"
/* JZ reserved word */  { UP DL(SUPER); return SUPER; 		}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 148 "lexic.l"
/* JZ reserved word */  { UP DL(SWITCH); return SWITCH; 		}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 149 "lexic.l"
/* JZ reserved word */  { UP DL(SYNCHRONIZED); return SYNCHRONIZED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 150 "lexic.l"
/* JZ reserved word */  { UP DL(THIS); return THIS; 		}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 151 "lexic.l"
/* JZ reserved word */  { UP DL(THROW); return THROW; 		}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 152 "lexic.l"
/* JZ reserved word */  { UP DL(THROWS); return THROWS; 		}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 153 "lexic.l"
/* JZ reserved word */  { UP DL(TRANSIENT); return TRANSIENT;	}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 154 "lexic.l"
/* JZ reserved word */  { UP DL(TRUE); return TRUE; 		}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 155 "lexic.l"
/* JZ reserved word */  { UP DL(TRY); return TRY; 			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 156 "lexic.l"
/* JZ reserved word */  { UP DL(TYPEOF); return TYPEOF; 		}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 157 "lexic.l"
/* JZ reserved word */  { UP DL(VAR); return VAR; 			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 158 "lexic.l"
/* JZ reserved word */  { UP DL(VOID); return VOID; 		}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 159 "lexic.l"
/* JZ reserved word */  { UP DL(VOLATILE); return VOLATILE; 	}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 160 "lexic.l"
/* JZ reserved word */  { UP DL(WHILE); return WHILE; 		}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 161 "lexic.l"
/* JZ reserved word */  { UP DL(WITH); return WITH; 		}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "lexic.l"
/* Variable/function name */ {
UP DL(LABEL);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 168 "lexic.l"
/* Variable/function name */ {
UP DL(OBJ_NAME);	return OBJ_NAME;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 174 "lexic.l"
{ UP DL(OPL_EQ); return OPL_EQ; 	}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 175 "lexic.l"
{ UP DL(OPL_NEQ); return OPL_NEQ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 176 "lexic.l"
{ UP DL(OPL_NOT); return OPL_NOT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 177 "lexic.l"
{ UP DL(OPL_AND); return OPL_AND; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 178 "lexic.l"
{ UP DL(OPL_OR); return OPL_OR; 	}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 179 "lexic.l"
{ UP DL(OPL_L); return OPL_L; 	}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 180 "lexic.l"
{ UP DL(OPL_G); return OPL_G; 	}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 181 "lexic.l"
{ UP DL(OPL_LE); return OPL_LE; 	}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 182 "lexic.l"
{ UP DL(OPL_GE); return OPL_GE; 	}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 184 "lexic.l"
{ UP DL(OP_ASSIGN_LSHIFT); return OP_ASSIGN_LSHIFT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 185 "lexic.l"
{ UP DL(OP_ASSIGN_RSHIFT); return OP_ASSIGN_RSHIFT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 186 "lexic.l"
{ UP DL(OP_ASSIGN_ADD); return OP_ASSIGN_ADD; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 187 "lexic.l"
{ UP DL(OP_ASSIGN_SUB); return OP_ASSIGN_SUB; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 188 "lexic.l"
{ UP DL(OP_ASSIGN_POW); return OP_ASSIGN_POW; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 189 "lexic.l"
{ UP DL(OP_ASSIGN_MUL); return OP_ASSIGN_MUL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 190 "lexic.l"
{ UP DL(OP_ASSIGN_DIV); return OP_ASSIGN_DIV; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 191 "lexic.l"
{ UP DL(OP_ASSIGN_MOD); return OP_ASSIGN_MOD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 192 "lexic.l"
{ UP DL(OP_ASSIGN_AND); return OP_ASSIGN_AND; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 193 "lexic.l"
{ UP DL(OP_ASSIGN_OR); return OP_ASSIGN_OR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 194 "lexic.l"
{ UP DL(OP_ASSIGN_XOR); return OP_ASSIGN_XOR; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 195 "lexic.l"
{ UP DL(OP_ASSIGN); return OP_ASSIGN; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 197 "lexic.l"
{ UP DL(OPB_NOT); return OPB_NOT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 198 "lexic.l"
{ UP DL(OPB_OR); return OPB_OR;  }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 199 "lexic.l"
{ UP DL(OPB_AND); return OPB_AND; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 200 "lexic.l"
{ UP DL(OPB_XOR); return OPB_XOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 201 "lexic.l"
{ UP DL(OPB_LSHIFT); return OPB_LSHIFT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 202 "lexic.l"
{ UP DL(OPB_RSHIFT); return OPB_RSHIFT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "lexic.l"
{ UP DL(OPA_INC); return OPA_INC; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "lexic.l"
{ UP DL(OPA_DEC); return OPA_DEC; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 206 "lexic.l"
{ UP DL(OPA_MUL); return OPA_MUL; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 207 "lexic.l"
{ UP DL(OPA_DIV); return OPA_DIV; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "lexic.l"
{ UP DL(OPA_MOD); return OPA_MOD; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "lexic.l"
{ UP DL(OPA_ADD); return OPA_ADD; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 210 "lexic.l"
{ UP DL(OPA_SUB); return OPA_SUB; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "lexic.l"
{ UP DL(DOT); return DOT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "lexic.l"
{ UP DL(COMA); return COMA; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "lexic.l"
{ UP DL(COLON); return COLON; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "lexic.l"
{ UP DL(QMARK); return QMARK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "lexic.l"
{ UP DL(LBRACKET_ROUND); return LBRACKET_ROUND; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "lexic.l"
{ UP DL(RBRACKET_ROUND); return RBRACKET_ROUND; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "lexic.l"
{ UP DL(LBRACKET_SQUARE); return LBRACKET_SQUARE;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "lexic.l"
{ UP DL(RBRACKET_SQUARE); return RBRACKET_SQUARE;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "lexic.l"
{ UP DL(LBRACKET_CURLY); return LBRACKET_CURLY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "lexic.l"
{ UP DL(RBRACKET_CURLY); return RBRACKET_CURLY; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 224 "lexic.l"
/* Spaces: tab and space */ {
UP	DL(TAB);
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexic.l"
/* Spaces: operation splitter */ {
	UP
	DL(END_OP);
	return END_OP;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 234 "lexic.l"
/* Spaces: newline */ {
	UPNL;
	DL(ENDLINE);
	//return ENDLINE;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 240 "lexic.l"
/* Lex error */  {
	
	yyerror("Unexpected symbol '%c'\n", yytext[0]);
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 245 "lexic.l"
ECHO;
	YY_BREAK
#line 1673 "lexic.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 362 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 362 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 361);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int _isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (_isatty( _fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 245 "lexic.l"


//void yyLexInit() 
//{	
//	g_yystat.yyline = 1;
//	g_yystat.yylinepos = 0;
//	g_yystat.yyglobalpos = 0;
//	g_yystat.yystartpos = 0;
//}


void yyerror(const char* format, ...)
{
	// retrieve the variable arguments and print
	va_list args;  
    va_start( args, format );  
	vprintf(format, args);
	
	if (!strcmp(format, "parse error"))
		printf("\n");
	
	std::cout << "Error position: Line " << g_yypos.getLine() << ", Column " << g_yypos.getCol() << std::endl;

	//printf("Position: [line %u: %u]\n", g_yystat.yyline, g_yystat.yylinepos);
	//printf("Text: '%s'\n", yytext);
	
	//yyin.close();
	//yyLexCleanup();
	//yyYaccCleanup();
	
	//WAIT_USER;
	//exit(1);
}

//void yyLexCleanup() {}


/*  A Bison parser, made from parse.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BREAK	258
#define	CASE	259
#define	CATCH	260
#define	CLASS	261
#define	CONST	262
#define	CONTINUE	263
#define	DEBUGGER	264
#define	DEFAULT	265
#define	DELETE	266
#define	DO	267
#define	ELSE	268
#define	ENUM	269
#define	EXPORT	270
#define	EXTENDS	271
#define	FALSE	272
#define	FINAL	273
#define	FINALLY	274
#define	FOR	275
#define	FUNCTION	276
#define	IF	277
#define	IMPLEMENTS	278
#define	IMPORT	279
#define	IN	280
#define	INSTANCEOF	281
#define	NEW	282
#define	NUL	283
#define	RETURN	284
#define	SUPER	285
#define	SWITCH	286
#define	THIS	287
#define	THROW	288
#define	TRUE	289
#define	TRY	290
#define	TYPEOF	291
#define	VAR	292
#define	VOID	293
#define	WHILE	294
#define	WITH	295
#define	UNDEFINED	296
#define	NAN	297
#define	INFINITY	298
#define	COMPONENTS_UTILS_IMPORT	299
#define	GET	300
#define	SET	301
#define	DOT	302
#define	COMA	303
#define	COLON	304
#define	QMARK	305
#define	LBRACKET_ROUND	306
#define	RBRACKET_ROUND	307
#define	LBRACKET_SQUARE	308
#define	RBRACKET_SQUARE	309
#define	LBRACKET_CURLY	310
#define	RBRACKET_CURLY	311
#define	INT_NUM	312
#define	LITERAL_NUMBER	313
#define	OBJ_NAME	314
#define	CSTRING	315
#define	END_OP	316
#define	ENDLINE	317
#define	OP_ASSIGN	318
#define	OP_ASSIGN_ADD	319
#define	OP_ASSIGN_SUB	320
#define	OP_ASSIGN_MUL	321
#define	OP_ASSIGN_POW	322
#define	OP_ASSIGN_DIV	323
#define	OP_ASSIGN_MOD	324
#define	OP_ASSIGN_LSHIFT	325
#define	OP_ASSIGN_RSHIFT	326
#define	OP_ASSIGN_AND	327
#define	OP_ASSIGN_XOR	328
#define	OP_ASSIGN_OR	329
#define	OPL_NOT	330
#define	OPL_AND	331
#define	OPL_OR	332
#define	OPL_EQ	333
#define	OPL_NEQ	334
#define	OPL_L	335
#define	OPL_G	336
#define	OPL_GE	337
#define	OPL_LE	338
#define	OPB_NOT	339
#define	OPB_OR	340
#define	OPB_AND	341
#define	OPB_XOR	342
#define	OPB_LSHIFT	343
#define	OPB_RSHIFT	344
#define	OPA_MUL	345
#define	OPA_DIV	346
#define	OPA_MOD	347
#define	OPA_ADD	348
#define	OPA_SUB	349
#define	OPA_INC	350
#define	OPA_DEC	351
#define	OPA_POW	352
#define	NO_ELSE	353

#line 91 "parse.y"
	
	#include <malloc.h>
	#include "KurCommon.h"
	
	#ifdef _DEBUG
	#define dbgCoBlck(str) SetTextColor(LIGHT_BLUE);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoExpr(str) SetTextColor(LIGHT_YELLOW);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoOper(str) SetTextColor(LIGHT_GREEN);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbg(str) std::cout << str << std::endl;
	#else
	#define dbgCoBlck(str)
	#define dbgCoExpr(str)
	#define dbgCoOper(str)
	#define dbg(str)
	#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		436
#define	YYFLAG		-32768
#define	YYNTBASE	99

#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 154)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     9,    14,    17,    21,    23,    26,    28,
    31,    33,    37,    40,    42,    45,    47,    50,    52,    55,
    59,    62,    67,    71,    74,    76,    78,    80,    82,    84,
    86,    88,    90,    92,    94,    98,   100,   106,   109,   113,
   116,   120,   124,   130,   131,   137,   140,   143,   146,   152,
   157,   163,   168,   172,   180,   187,   192,   196,   202,   210,
   216,   226,   236,   242,   249,   258,   266,   270,   271,   276,
   282,   286,   291,   297,   305,   308,   312,   314,   318,   320,
   324,   328,   332,   338,   343,   347,   353,   359,   365,   371,
   379,   386,   392,   400,   408,   409,   411,   413,   417,   426,
   439,   448,   450,   452,   453,   455,   456,   458,   462,   463,
   465,   467,   469,   471,   473,   475,   477,   479,   481,   483,
   485,   487,   489,   491,   495,   497,   499,   501,   505,   509,
   513,   517,   521,   524,   528,   532,   536,   540,   544,   548,
   552,   556,   560,   564,   568,   572,   576,   582,   585,   588,
   589,   591,   593,   595,   597,   599,   601,   604,   609,   612,
   617,   620,   623,   626,   630,   634,   638,   642,   646,   650,
   654,   658,   662,   666,   670,   674,   678,   682,   686,   690,
   694,   698,   704,   706,   708,   710,   714,   718,   722,   728,
   733,   736,   738,   742,   746,   751,   753,   755,   757
};

static const short yyrhs[] = {   127,
     0,    99,   127,     0,    55,    99,    56,     0,    99,    55,
    99,    56,     0,    55,    56,     0,    99,    55,    56,     0,
   101,     0,    99,   101,     0,   103,     0,    99,   103,     0,
   129,     0,    55,    99,    56,     0,    55,    56,     0,   101,
     0,   133,    61,     0,   106,     0,   123,    61,     0,   104,
     0,   151,    49,     0,   102,   151,    49,     0,   102,   127,
     0,   102,    55,    99,    56,     0,   102,    55,    56,     0,
   102,   101,     0,   122,     0,   119,     0,   117,     0,   118,
     0,   116,     0,   113,     0,   112,     0,   111,     0,   109,
     0,   108,     0,    53,   149,    54,     0,   107,     0,    44,
    51,   149,    52,    61,     0,     8,    61,     0,     8,   151,
    61,     0,     3,    61,     0,     3,   151,    61,     0,   151,
    49,   126,     0,   110,    61,   151,    49,   126,     0,     0,
    29,    55,   110,    56,    61,     0,    29,   129,     0,    29,
   101,     0,    33,   100,     0,    35,    55,    99,    56,   115,
     0,    35,    55,    56,   115,     0,    35,    55,    99,    56,
   114,     0,    19,    55,    99,    56,     0,    19,    55,    56,
     0,     5,    51,   151,    52,    55,    99,    56,     0,     5,
    51,   151,    52,    55,    56,     0,     5,    55,    99,    56,
     0,     5,    55,    56,     0,   115,    19,    55,    99,    56,
     0,    12,   100,    39,    51,   133,    52,    61,     0,    39,
    51,   133,    52,   100,     0,    20,    51,   133,    61,   133,
    61,   133,    52,   100,     0,    20,    51,   123,    61,   133,
    61,   133,    52,   100,     0,    20,    51,   133,    52,   100,
     0,    20,    51,    37,   133,    52,   100,     0,    31,    51,
   133,    52,    55,   121,   120,    56,     0,    31,    51,   133,
    52,    55,   120,    56,     0,    10,    49,    99,     0,     0,
     4,   133,    49,    99,     0,   121,     4,   133,    49,    99,
     0,     4,   133,    49,     0,   121,     4,   133,    49,     0,
    22,    51,   133,    52,   100,     0,    22,    51,   133,    52,
   100,    13,   100,     0,    37,   124,     0,   140,    48,   124,
     0,   151,     0,   124,    48,   151,     0,   140,     0,   124,
    48,   140,     0,   151,    49,   126,     0,   152,    49,   126,
     0,    53,   133,    54,    49,   126,     0,    47,    47,    47,
   150,     0,     6,    49,   126,     0,    45,   150,    55,    99,
    56,     0,    46,   150,    55,    99,    56,     0,   125,    48,
   151,    49,   126,     0,   125,    48,   152,    49,   126,     0,
   125,    48,    53,   133,    54,    49,   126,     0,   125,    48,
    47,    47,    47,   150,     0,   125,    48,     6,    49,   126,
     0,   125,    48,    45,   150,    55,    99,    56,     0,   125,
    48,    46,   150,    55,    99,    56,     0,     0,   133,     0,
   129,     0,    55,   125,    56,     0,    21,   151,    51,   132,
    52,    55,   130,    56,     0,    51,    21,   131,    51,   132,
    52,    55,   130,    56,    51,    52,    52,     0,    21,   131,
    51,   132,    52,    55,   130,    56,     0,   128,     0,    99,
     0,     0,   151,     0,     0,   151,     0,   132,    48,   151,
     0,     0,   136,     0,   140,     0,   139,     0,   146,     0,
   147,     0,   145,     0,   141,     0,   142,     0,   148,     0,
   153,     0,   143,     0,   144,     0,   138,     0,    32,     0,
   150,    26,   150,     0,   137,     0,   135,     0,   133,     0,
   134,    48,   133,     0,    53,   134,    54,     0,    51,   133,
    52,     0,    51,   129,    52,     0,   133,    25,   133,     0,
    36,   133,     0,   150,    64,   133,     0,   150,    65,   133,
     0,   150,    66,   133,     0,   150,    67,   133,     0,   150,
    68,   133,     0,   150,    69,   133,     0,   150,    70,   133,
     0,   150,    71,   133,     0,   150,    72,   133,     0,   150,
    73,   133,     0,   150,    74,   133,     0,   150,    63,   133,
     0,   150,    63,   129,     0,   150,    63,    55,   125,    56,
     0,    27,   133,     0,    11,   150,     0,     0,    28,     0,
    34,     0,    17,     0,    41,     0,    42,     0,    43,     0,
    95,   150,     0,    95,    51,   150,    52,     0,    96,   150,
     0,    96,    51,   150,    52,     0,   150,    95,     0,   150,
    96,     0,    75,   133,     0,   133,    90,   133,     0,   133,
    91,   133,     0,   133,    92,   133,     0,   133,    94,   133,
     0,   133,    93,   133,     0,   133,    76,   133,     0,   133,
    77,   133,     0,   133,    78,   133,     0,   133,    79,   133,
     0,   133,    80,   133,     0,   133,    81,   133,     0,   133,
    82,   133,     0,   133,    83,   133,     0,   133,    86,   133,
     0,   133,    85,   133,     0,   133,    87,   133,     0,   133,
    88,   133,     0,   133,    89,   133,     0,   133,    50,   133,
    49,   133,     0,   150,     0,   133,     0,   129,     0,    55,
   125,    56,     0,   149,    48,   133,     0,   149,    48,   129,
     0,   149,    48,    55,   125,    56,     0,   150,    51,   149,
    52,     0,   150,   105,     0,   151,     0,   150,    47,   151,
     0,    32,    47,   151,     0,    32,    53,   150,    54,     0,
   152,     0,    59,     0,    60,     0,    58,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   148,   150,   151,   153,   154,   156,   157,   159,   160,
   162,   165,   166,   168,   170,   172,   173,   175,   178,   180,
   182,   184,   185,   186,   189,   192,   194,   196,   198,   200,
   202,   204,   206,   208,   210,   215,   218,   223,   225,   227,
   229,   237,   239,   240,   242,   244,   245,   249,   252,   254,
   255,   257,   259,   261,   263,   264,   265,   266,   268,   271,
   274,   277,   278,   279,   285,   287,   289,   291,   293,   295,
   296,   297,   303,   305,   312,   314,   316,   318,   319,   320,
   322,   324,   325,   326,   327,   328,   329,   331,   332,   333,
   334,   335,   336,   337,   338,   346,   348,   349,   357,   360,
   363,   365,   367,   369,   371,   373,   375,   377,   378,   384,
   392,   393,   394,   395,   396,   397,   398,   400,   402,   405,
   407,   409,   411,   413,   415,   417,   419,   421,   423,   426,
   428,   430,   434,   437,   439,   440,   441,   442,   443,   444,
   445,   446,   447,   448,   460,   462,   463,   466,   469,   472,
   475,   477,   478,   479,   480,   481,   483,   486,   487,   488,
   493,   495,   497,   499,   501,   502,   503,   504,   506,   507,
   508,   509,   510,   511,   512,   513,   515,   516,   517,   518,
   519,   521,   526,   530,   532,   533,   535,   536,   537,   539,
   541,   542,   543,   544,   545,   546,   555,   556,   557
};

static const char * const yytname[] = {   "$","error","$undefined.","BREAK",
"CASE","CATCH","CLASS","CONST","CONTINUE","DEBUGGER","DEFAULT","DELETE","DO",
"ELSE","ENUM","EXPORT","EXTENDS","FALSE","FINAL","FINALLY","FOR","FUNCTION",
"IF","IMPLEMENTS","IMPORT","IN","INSTANCEOF","NEW","NUL","RETURN","SUPER","SWITCH",
"THIS","THROW","TRUE","TRY","TYPEOF","VAR","VOID","WHILE","WITH","UNDEFINED",
"NAN","INFINITY","COMPONENTS_UTILS_IMPORT","GET","SET","DOT","COMA","COLON",
"QMARK","LBRACKET_ROUND","RBRACKET_ROUND","LBRACKET_SQUARE","RBRACKET_SQUARE",
"LBRACKET_CURLY","RBRACKET_CURLY","INT_NUM","LITERAL_NUMBER","OBJ_NAME","CSTRING",
"END_OP","ENDLINE","OP_ASSIGN","OP_ASSIGN_ADD","OP_ASSIGN_SUB","OP_ASSIGN_MUL",
"OP_ASSIGN_POW","OP_ASSIGN_DIV","OP_ASSIGN_MOD","OP_ASSIGN_LSHIFT","OP_ASSIGN_RSHIFT",
"OP_ASSIGN_AND","OP_ASSIGN_XOR","OP_ASSIGN_OR","OPL_NOT","OPL_AND","OPL_OR",
"OPL_EQ","OPL_NEQ","OPL_L","OPL_G","OPL_GE","OPL_LE","OPB_NOT","OPB_OR","OPB_AND",
"OPB_XOR","OPB_LSHIFT","OPB_RSHIFT","OPA_MUL","OPA_DIV","OPA_MOD","OPA_ADD",
"OPA_SUB","OPA_INC","OPA_DEC","OPA_POW","NO_ELSE","block","single_block","universal_single_block",
"label","label_expression","operators","gen_list","reserved_expressions","components_utils_import_expression",
"continue_operator","break_operator","strange_expression","return_operator",
"throw_operator","try_operator","finally_operator","catch_operator","do_operator",
"while_operator","for_operator","switch_operator","default_operator","case_expression",
"if_operator","var_init","var","init_block","init_value","blck_function_expression",
"iif_expression","function_expression","func_body","func_name","func_parameters",
"expression","square_bracket_enum","square_bracket_expression","round_bracket_expression",
"in_expression","typeof_operator","shortened_expression","assign_expression",
"new_expression","delete_expression","empty_expression","useful_words","unary_expression",
"binary_expression","ternary_expression","obj_and_method","parameters","object",
"literal_string","constant_string","literal_number",""
};
#endif

static const short yyr1[] = {     0,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   100,   100,   100,   100,   101,   101,   101,   101,   102,   102,
   103,   103,   103,   103,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   105,   106,   107,   108,   108,   109,
   109,   110,   110,   110,   111,   111,   111,   112,   113,   113,
   113,   114,   114,   115,   115,   115,   115,   115,   116,   117,
   118,   118,   118,   118,   119,   119,   120,   120,   121,   121,
   121,   121,   122,   122,   123,   123,   124,   124,   124,   124,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   126,   126,   126,   127,   128,
   129,   129,   130,   130,   131,   131,   132,   132,   132,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   135,   136,
   136,   137,   138,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   140,   140,   140,   141,   142,   143,
   144,   144,   144,   144,   144,   144,   145,   145,   145,   145,
   145,   145,   145,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   147,   148,   149,   149,   149,   149,   149,   149,   150,
   150,   150,   150,   150,   150,   150,   151,   152,   153
};

static const short yyr2[] = {     0,
     1,     2,     3,     4,     2,     3,     1,     2,     1,     2,
     1,     3,     2,     1,     2,     1,     2,     1,     2,     3,
     2,     4,     3,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     5,     2,     3,     2,
     3,     3,     5,     0,     5,     2,     2,     2,     5,     4,
     5,     4,     3,     7,     6,     4,     3,     5,     7,     5,
     9,     9,     5,     6,     8,     7,     3,     0,     4,     5,
     3,     4,     5,     7,     2,     3,     1,     3,     1,     3,
     3,     3,     5,     4,     3,     5,     5,     5,     5,     7,
     6,     5,     7,     7,     0,     1,     1,     3,     8,    12,
     8,     1,     1,     0,     1,     0,     1,     3,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     1,     3,     3,     3,
     3,     3,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     2,     2,     0,
     1,     1,     1,     1,     1,     1,     2,     4,     2,     4,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     1,     1,     1,     3,     3,     3,     5,     4,
     2,     1,     3,     3,     4,     1,     1,     1,     1
};

static const short yydefact[] = {   150,
     0,     0,     0,   150,   153,     0,     0,     0,   150,   151,
   150,     0,   123,   150,   152,     0,   150,     0,     0,   154,
   155,   156,     0,   150,   150,   150,   199,   197,   198,   150,
     0,     0,   150,     7,   150,     9,    18,    16,    36,    34,
    33,    32,    31,    30,    29,    27,    28,    26,    25,     0,
     1,     0,   126,   110,   125,   122,   112,   111,   116,   117,
   120,   121,   115,   113,   114,   118,   183,   192,   196,   119,
    40,     0,    38,     0,     0,   149,   192,   106,   150,   150,
     0,    14,   102,    11,   150,     0,   150,   148,   111,    44,
    47,    46,   150,     0,     0,    48,   150,   133,    75,    79,
     0,   192,   150,   150,     0,     0,   127,     0,     5,   150,
   163,     0,   157,     0,   159,   150,     8,    10,     2,   150,
    24,    21,   192,    17,   150,   150,    15,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,     0,     0,     0,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   161,   162,   191,    19,    41,    39,     0,   105,
   106,    13,   150,     0,   150,     0,     0,   109,     0,     0,
     0,     0,   194,     0,     0,   150,     0,     0,    95,   185,
   184,     0,   131,   130,   150,   129,     3,     0,     0,     6,
   150,    23,   150,    20,   132,     0,   169,   170,   171,   172,
   173,   174,   175,   176,   178,   177,   179,   180,   181,   164,
   165,   166,   168,   167,    76,   124,   193,     0,     0,    95,
   146,   145,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   109,     0,    12,   150,     0,   111,   150,
   150,   150,     0,   107,   150,     0,     0,   150,     0,   195,
     0,    50,     0,    80,   192,   150,     0,     0,     0,     0,
   150,     0,     0,     0,   150,     0,   128,   158,   160,     4,
    22,   150,   190,    35,     0,     0,   109,     0,   150,     0,
    63,     0,     0,     0,    73,    45,     0,    95,    42,    97,
    96,    68,     0,   150,     0,     0,    51,    49,    60,   150,
     0,     0,     0,     0,     0,   186,   150,   150,    95,   188,
   187,    37,   182,   147,     0,     0,     0,    64,   150,   150,
   108,   150,   150,   150,     0,   150,     0,     0,    68,     0,
    57,   150,   150,   150,    85,   150,   150,     0,     0,     0,
     0,     0,     0,   150,     0,     0,    81,    82,     0,   150,
     0,    59,     0,     0,   150,     0,    74,    43,    98,     0,
   150,    66,   150,     0,     0,    56,   150,    53,   150,   150,
   150,    84,   150,   150,     0,     0,     0,     0,   150,   150,
   189,     0,   150,   150,   150,    99,   150,   150,     0,    65,
   150,    58,    52,    86,    87,    83,    92,   150,   150,     0,
     0,    88,    89,   101,     0,    62,    61,   150,   150,    55,
   150,   150,   150,    91,   150,   101,   150,    54,    93,    94,
    90,     0,     0,   100,     0,     0
};

static const short yydefgoto[] = {   365,
    81,    34,    35,    36,    37,   165,    38,    39,    40,    41,
   180,    42,    43,    44,   307,   262,    45,    46,    47,    48,
   338,   339,    49,    50,    99,   272,   299,    51,    83,   300,
   366,   169,   253,    52,   108,    53,    54,    55,    56,    57,
    89,    59,    60,    61,    62,    63,    64,    65,    66,   192,
    67,    77,    69,    70
};

static const short yypact[] = {  2999,
    27,    30,    -2,  3069,-32768,   -20,   -39,   -10,  3444,-32768,
  3139,    10,    88,  3069,-32768,    13,  3444,    -2,    19,-32768,
-32768,-32768,    47,  3318,  3444,  1319,-32768,-32768,-32768,  3444,
   -17,    33,   969,-32768,  3209,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    20,
-32768,  3488,-32768,-32768,-32768,-32768,-32768,    53,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   744,    59,-32768,-32768,
-32768,    62,-32768,    70,    88,    -7,-32768,   -39,  3369,  1389,
    94,-32768,-32768,-32768,  3398,    91,  3444,-32768,-32768,   -39,
-32768,-32768,  3444,   -39,    -2,-32768,  1459,-32768,    95,-32768,
    22,   -25,  3444,   833,   100,   130,  4080,    99,-32768,  1529,
-32768,    -2,    -7,    -2,    -7,  1599,-32768,-32768,-32768,  1669,
-32768,-32768,   105,-32768,  3444,  3444,-32768,  3444,  3444,  3444,
  3444,  3444,  3444,  3444,  3444,  3444,  3444,  3444,  3444,  3444,
  3444,  3444,  3444,  3444,  3444,    -2,    -2,   -39,   833,   833,
   889,  3444,  3444,  3444,  3444,  3444,  3444,  3444,  3444,  3444,
  3444,  3444,-32768,-32768,-32768,-32768,-32768,-32768,   139,-32768,
   -39,-32768,  1739,   145,  3444,   136,  3465,   -39,  3510,   -40,
   153,  3558,-32768,    85,   199,  1809,    -2,  3580,     3,-32768,
  4080,    76,-32768,-32768,  3444,-32768,-32768,   109,   141,-32768,
  1879,-32768,  1949,-32768,   146,  3604,  4156,  4139,  3418,  3418,
   146,   146,   146,   146,  4175,  4198,   683,   135,   135,-32768,
-32768,-32768,   163,   163,    95,    -7,-32768,    92,   116,     3,
-32768,  4080,  4080,  4080,  4080,  4080,  4080,  4080,  4080,  4080,
  4080,  4080,  4080,   -39,   154,-32768,  3444,  3650,   -24,  3444,
  3069,  3444,   115,-32768,  3069,   171,   -39,  3238,   186,-32768,
   126,   227,     9,-32768,    11,  3069,   202,    -2,    -2,   201,
  3444,   -31,   207,   209,  3289,   200,  4080,-32768,-32768,-32768,
-32768,  3444,-32768,-32768,    -9,   147,   -39,  3695,  3069,  3729,
-32768,  3774,   -39,   205,   251,-32768,   218,     3,-32768,-32768,
  4080,   162,   -39,  2019,   213,   214,-32768,   227,-32768,  3238,
    49,    52,   223,  3819,     7,-32768,  3238,  3238,     3,-32768,
  4080,-32768,  4116,-32768,   217,   195,   215,-32768,  3444,  3444,
-32768,  2089,  3069,  3238,    23,  3444,   228,   222,   164,   230,
-32768,  2159,  2999,  2229,-32768,  2999,  2999,    -2,   231,   235,
    -2,    -2,   232,  3444,   237,   239,-32768,-32768,    58,  2089,
   234,-32768,  3864,  3909,  2299,   236,-32768,-32768,-32768,  3955,
  2999,-32768,  3444,   240,   244,-32768,  2369,-32768,  2439,  2509,
  2579,    -7,  3238,  3238,    64,    74,   243,  4000,  3238,  3238,
-32768,   246,  2089,  3069,  3069,-32768,  1039,  2649,  4046,-32768,
  2719,-32768,-32768,-32768,-32768,-32768,-32768,  2999,  2999,    -2,
   242,-32768,-32768,-32768,   252,-32768,-32768,  1109,  1179,-32768,
  2789,  2859,  2929,    -7,  3238,   249,  1249,-32768,-32768,-32768,
-32768,   258,   260,-32768,   294,-32768
};

static const short yypgoto[] = {    29,
    50,   238,-32768,   425,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    32,-32768,-32768,-32768,-32768,
   -26,-32768,-32768,   229,   172,  -224,  -307,   274,-32768,     8,
  -355,   149,  -236,   584,-32768,-32768,-32768,-32768,-32768,-32768,
   165,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    35,
   119,     0,  -185,-32768
};


#define	YYLAST		4292


static const short yytable[] = {    68,
    72,    74,   345,   274,   392,   285,    86,   286,   267,   357,
   358,    84,   350,   261,    75,   256,   315,   102,    92,    28,
   257,    84,   -77,   -79,   316,    68,   368,   306,    33,    75,
    85,   105,    68,   112,   123,   -77,   -79,   415,   315,   148,
    87,    28,    29,   149,   274,   150,   324,   268,   269,   270,
   326,   351,   352,   353,   110,   271,    28,    29,   -78,   354,
    93,    28,    29,    96,    75,    28,    29,    97,   148,   103,
   315,   -78,   149,   335,   150,   406,   407,   170,   369,    68,
   124,   412,   413,   114,   151,    28,   105,    71,    28,   181,
    73,    28,    29,   183,   359,   148,    68,   104,   148,   149,
   146,   150,   149,   346,   150,   315,   347,   166,   173,    68,
   148,   190,   274,   391,   149,    68,   150,   431,   408,    68,
   148,    76,   167,   275,   149,   186,   150,   276,   409,   356,
   168,   148,   174,   274,    94,   149,   101,   150,   260,   275,
    95,   178,   187,   283,   201,   102,   195,   227,   203,   113,
   115,   193,   196,   204,   125,   148,   190,   190,   231,   149,
   278,   150,   293,   275,    58,   336,   294,   373,    58,   284,
   170,   337,    68,   337,   102,    58,   303,   254,    58,   126,
   304,   194,   100,   228,   229,    68,   265,   148,   273,   244,
    58,   149,   279,   150,   293,   247,   250,    58,   325,    58,
    68,   258,    68,   261,   287,   128,   129,   130,   131,   132,
   133,   134,   135,   184,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   141,   142,   143,   144,   145,   273,
   198,   296,   199,   139,   140,   141,   142,   143,   144,   145,
   302,    82,   293,   254,    58,   305,   361,   313,    91,    58,
   310,    82,   141,   142,   143,   317,   297,   318,    84,   332,
   322,    58,    84,   333,   101,   226,   334,   343,   344,   348,
   117,   360,   121,    84,    58,   362,   371,   372,   387,   383,
    58,   375,   320,   384,    58,   389,   254,   390,   393,   410,
   425,   396,   331,   436,   308,   400,    84,   273,   401,   432,
   291,   414,   340,    68,   295,   101,   119,   426,   122,   433,
   100,   434,   374,   176,   355,   309,     0,   225,   273,   245,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,   342,     0,     0,     0,     0,    58,   328,   249,
    84,    68,    68,    68,     0,    68,    68,   117,     0,     0,
    58,   264,     0,     0,     0,     0,     0,     0,     0,    68,
     0,     0,     0,     0,    68,    58,     0,    58,     0,     0,
    68,   377,   379,     0,   380,   381,    68,     0,    68,    68,
    68,     0,   367,   119,     0,     0,   311,   312,     0,     0,
     0,     0,    68,     0,     0,     0,    68,    68,     0,   398,
    68,    84,    84,     0,     0,     0,     0,    68,    68,     0,
   117,     0,     0,     0,     0,    58,     0,    68,    68,    58,
    68,    68,    68,   117,     0,   418,    68,     0,     0,   421,
    58,     0,     0,     0,     0,     0,   422,   423,   117,     0,
   117,     0,     0,   416,   417,     0,   119,   427,     0,     0,
     0,     0,     0,    58,     0,     0,     0,   118,     0,   119,
     0,     0,     0,     0,     0,     0,   382,     0,    58,   385,
   386,     0,     0,     0,   119,     0,   119,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
     0,     0,    82,     0,     0,     0,    58,    58,     0,     0,
     0,     0,     0,    82,     0,     0,    58,    58,    58,     0,
    58,    58,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    58,     0,    82,     0,   424,    58,
     0,     0,     0,     0,   118,    58,     0,     0,     0,     0,
     0,    58,     0,    58,    58,    58,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,    58,    58,
     0,    58,    58,     0,     0,    58,     0,     0,     0,     0,
    82,     0,    58,    58,     0,     0,     0,     0,     0,   117,
     0,     0,    58,    58,     0,    58,    58,    58,     0,     0,
     0,    58,    88,     0,     0,     0,     0,   118,     0,     0,
    98,     0,   117,     0,     0,     0,     0,   106,   107,     0,
   118,     0,     0,   111,   117,   119,   117,   117,   117,     0,
     0,     0,     0,     0,     0,   118,     0,   118,     0,     0,
     0,    82,    82,     0,     0,   117,     0,     0,   119,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,     0,   119,   119,   119,   117,     0,     0,   117,   117,
   117,     0,   106,     0,   117,     0,     0,     0,   177,     0,
   179,   119,     0,     0,     0,     0,   182,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,   191,     0,     0,
     0,   119,     0,     0,   119,   119,   119,     0,     0,     0,
   119,     0,     0,     0,     0,     0,     0,   125,   205,   206,
     0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     0,     0,   191,   191,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   248,     0,
   130,   131,   132,   133,   134,   135,   118,     0,   137,   147,
   139,   140,   141,   142,   143,   144,   145,     0,   277,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
   148,     0,     0,     0,   149,     0,   150,     0,     0,     0,
     0,   118,     0,   118,   118,   118,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,     0,
     0,     0,   118,     0,     0,     0,     0,     0,     0,     0,
   288,     0,     0,   290,     0,   292,     0,     0,   163,   164,
     0,   301,   118,     3,     0,   118,   118,   118,     0,     5,
     0,   118,     0,    78,   314,     0,     0,     0,   321,     9,
    10,     0,     0,     0,    13,   323,    15,     0,    17,     0,
     0,     0,     0,    20,    21,    22,     0,     0,     0,     0,
     0,     0,     0,    79,     0,    25,     0,   189,     0,     0,
    27,    28,    29,   301,     0,     0,     0,     0,     0,     3,
   301,   301,     0,     0,     0,     5,     0,    30,     0,    78,
     0,     0,   363,   364,     0,     9,    10,   301,     0,   370,
    13,     0,    15,     0,    17,     0,     0,    31,    32,    20,
    21,    22,     0,     0,     0,     0,     0,   388,     0,    79,
     0,    25,     0,   230,     0,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,   399,     0,     0,     0,
     0,     0,     0,    30,     0,     0,   301,   301,   435,     0,
     0,     1,   301,   301,     0,     0,     2,     0,     0,     3,
     4,     0,     0,    31,    32,     5,     0,     0,     6,     7,
     8,     0,     0,     0,     0,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,   301,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,     0,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,   -71,    30,     0,     0,     2,     0,   -71,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   -71,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,   -69,    30,     0,     0,     2,     0,   -69,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   -69,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,   -72,    30,     0,     0,     2,     0,   -72,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   -72,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,   -70,    30,     0,     0,     2,     0,   -70,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   -70,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   109,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   172,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   185,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   197,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   200,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   202,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   246,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   263,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   280,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   281,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   341,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,  -104,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   376,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   378,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,  -103,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   402,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   403,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   404,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   405,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   -67,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   420,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   428,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   429,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,   116,   430,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,    78,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    79,
     0,    25,     0,    80,     0,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,    78,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     0,    20,
    21,    22,    23,     0,     0,     0,     0,     0,     0,    79,
     0,    25,     0,    90,     0,     0,    27,    28,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     1,     0,    30,     0,     0,     2,     0,     0,     3,
     4,     0,     0,     0,     0,     5,     0,     0,     6,     7,
     8,     0,     0,    31,    32,     9,    10,    11,     0,    12,
    13,    14,    15,    16,    17,    18,     0,    19,     3,    20,
    21,    22,    23,     0,     5,     0,     0,     0,    78,    24,
     0,    25,     0,   120,     9,    10,    27,    28,    29,    13,
     0,    15,     0,    17,     0,     0,     0,     0,    20,    21,
    22,     0,     0,    30,     0,     0,     0,     0,    79,     0,
    25,     0,   298,     0,     0,    27,    28,    29,     0,     3,
     0,     0,     0,    31,    32,     5,     0,     0,     0,    78,
     0,     0,    30,     0,     0,     9,    10,     0,     0,     0,
    13,     0,    15,     0,    17,     0,     0,     0,     3,    20,
    21,    22,    31,    32,     5,     0,     0,     0,    78,    79,
     0,    25,     0,   319,     9,    10,    27,    28,    29,    13,
     0,    15,     0,    17,     0,     0,     0,     0,    20,    21,
    22,     0,     0,    30,     0,     0,     0,     0,    79,     0,
    25,     0,     0,     0,     0,    27,    28,    29,     0,     3,
     0,     0,     0,    31,    32,     5,     0,     0,     0,   171,
     0,     0,    30,     0,     0,     9,    10,     0,     0,     0,
    13,     0,    15,     0,    17,     0,     0,     0,     3,    20,
    21,    22,    31,    32,     5,     0,     0,     0,     0,    79,
     0,    25,     0,     0,     9,    10,    27,    28,    29,    13,
     0,    15,     0,    17,   175,     0,     0,     0,    20,    21,
    22,     0,   125,    30,     0,     0,     0,     0,    24,     0,
    25,     0,     0,     0,     3,    27,    28,    29,     0,     0,
     5,     0,     0,    31,    32,     0,     0,     0,     0,     0,
     9,    10,    30,     0,     0,    13,     0,    15,     0,    17,
     0,     0,     0,     0,    20,    21,    22,     0,     0,   125,
     0,     0,    31,    32,    24,     0,    25,   132,   133,   134,
   135,    27,    28,    29,     0,   139,   140,   141,   142,   143,
   144,   145,   125,     0,   126,     0,   251,     0,    30,     0,
     0,     0,     0,     0,     0,   252,     0,     0,     0,     0,
     0,     0,     0,     0,   125,     0,     0,   126,    31,    32,
   128,   129,   130,   131,   132,   133,   134,   135,   127,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   126,
     0,   255,     0,   128,   129,   130,   131,   132,   133,   134,
   135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   125,     0,     0,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   125,     0,     0,   126,     0,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     0,   266,     0,   128,   129,   130,   131,   132,   133,   134,
   135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   282,   126,     0,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   125,     0,     0,     0,     0,   128,
   129,   130,   131,   132,   133,   134,   135,     0,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,     0,   126,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     0,     0,     0,     0,     0,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   126,     0,   327,     0,     0,     0,
     0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,   129,   130,   131,   132,   133,   134,   135,   126,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   329,
     0,     0,     0,     0,     0,     0,     0,     0,   125,     0,
     0,     0,     0,     0,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   126,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   330,     0,     0,     0,     0,     0,
     0,     0,     0,   125,     0,     0,     0,     0,     0,   128,
   129,   130,   131,   132,   133,   134,   135,     0,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   126,     0,
     0,     0,   349,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   125,     0,
     0,     0,     0,     0,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   126,     0,   394,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,     0,     0,     0,     0,     0,   128,
   129,   130,   131,   132,   133,   134,   135,     0,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   126,     0,
   395,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     0,     0,     0,     0,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   397,   126,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,     0,     0,     0,     0,     0,
   128,   129,   130,   131,   132,   133,   134,   135,     0,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   126,
     0,     0,     0,   411,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,     0,     0,     0,     0,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   419,   126,     0,     0,     0,     0,
     0,     0,     0,     0,   125,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   129,   130,   131,   132,   133,   134,   135,   126,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   128,   129,   130,   131,   132,
   133,   134,   135,   125,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,     0,     0,     0,     0,     0,     0,
   125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   129,   130,   131,   132,   133,   134,   135,   125,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     0,     0,     0,     0,   128,     0,   130,   131,   132,   133,
   134,   135,   125,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   130,   131,   132,   133,   134,   135,     0,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     0,     0,   130,   131,   132,   133,   134,   135,     0,     0,
   137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
   135,     0,     0,     0,     0,   139,   140,   141,   142,   143,
   144,   145
};

static const short yycheck[] = {     0,
     1,     2,   310,   189,   360,   230,     7,   244,     6,   317,
   318,     4,     6,     5,    32,    56,    48,    18,    11,    59,
    61,    14,    48,    48,    56,    26,   334,    19,     0,    32,
    51,    24,    33,    51,    35,    61,    61,   393,    48,    47,
    51,    59,    60,    51,   230,    53,    56,    45,    46,    47,
   287,    45,    46,    47,    26,    53,    59,    60,    48,    53,
    51,    59,    60,    14,    32,    59,    60,    55,    47,    51,
    48,    61,    51,   298,    53,   383,   384,    78,    56,    80,
    61,   389,   390,    51,    63,    59,    79,    61,    59,    90,
    61,    59,    60,    94,   319,    47,    97,    51,    47,    51,
    48,    53,    51,    55,    53,    48,    55,    49,    80,   110,
    47,   104,   298,    56,    51,   116,    53,   425,    55,   120,
    47,     3,    61,    48,    51,    97,    53,    52,    55,   315,
    61,    47,    39,   319,    47,    51,    18,    53,    54,    48,
    53,    51,    48,    52,   116,   146,    48,   148,   120,    31,
    32,    52,    54,    49,    25,    47,   149,   150,   151,    51,
    52,    53,    48,    48,     0,     4,    52,     4,     4,    54,
   171,    10,   173,    10,   175,    11,    51,   178,    14,    50,
    55,    52,    18,   149,   150,   186,   187,    47,   189,    51,
    26,    51,    52,    53,    48,    51,    61,    33,    52,    35,
   201,    49,   203,     5,    51,    76,    77,    78,    79,    80,
    81,    82,    83,    95,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    90,    91,    92,    93,    94,   230,
   112,    61,   114,    88,    89,    90,    91,    92,    93,    94,
    55,     4,    48,   244,    80,    19,    52,    47,    11,    85,
    49,    14,    90,    91,    92,    49,   257,    49,   251,    55,
    61,    97,   255,    13,   146,   147,    49,    55,    55,    47,
    33,    55,    35,   266,   110,    61,    49,    56,    47,    49,
   116,    52,   275,    49,   120,    49,   287,    49,    55,    47,
    49,    56,   293,     0,   263,    56,   289,   298,    55,    51,
   251,    56,   303,   304,   255,   187,    33,    56,    35,    52,
   146,    52,   339,    85,   315,   266,    -1,   146,   319,   171,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   332,   304,    -1,    -1,    -1,    -1,   173,   289,   175,
   333,   342,   343,   344,    -1,   346,   347,   110,    -1,    -1,
   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   201,    -1,   203,    -1,    -1,
   371,   343,   344,    -1,   346,   347,   377,    -1,   379,   380,
   381,    -1,   333,   110,    -1,    -1,   268,   269,    -1,    -1,
    -1,    -1,   393,    -1,    -1,    -1,   397,   398,    -1,   371,
   401,   394,   395,    -1,    -1,    -1,    -1,   408,   409,    -1,
   173,    -1,    -1,    -1,    -1,   251,    -1,   418,   419,   255,
   421,   422,   423,   186,    -1,   397,   427,    -1,    -1,   401,
   266,    -1,    -1,    -1,    -1,    -1,   408,   409,   201,    -1,
   203,    -1,    -1,   394,   395,    -1,   173,   419,    -1,    -1,
    -1,    -1,    -1,   289,    -1,    -1,    -1,    33,    -1,   186,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   304,   351,
   352,    -1,    -1,    -1,   201,    -1,   203,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   251,    -1,
    -1,    -1,   255,    -1,    -1,    -1,   332,   333,    -1,    -1,
    -1,    -1,    -1,   266,    -1,    -1,   342,   343,   344,    -1,
   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,   289,    -1,   410,   365,
    -1,    -1,    -1,    -1,   110,   371,    -1,    -1,    -1,    -1,
    -1,   377,    -1,   379,   380,   381,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
    -1,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,    -1,
   333,    -1,   408,   409,    -1,    -1,    -1,    -1,    -1,   342,
    -1,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
    -1,   427,     9,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    17,    -1,   365,    -1,    -1,    -1,    -1,    24,    25,    -1,
   186,    -1,    -1,    30,   377,   342,   379,   380,   381,    -1,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,    -1,    -1,
    -1,   394,   395,    -1,    -1,   398,    -1,    -1,   365,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   377,    -1,   379,   380,   381,   418,    -1,    -1,   421,   422,
   423,    -1,    79,    -1,   427,    -1,    -1,    -1,    85,    -1,
    87,   398,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,    -1,    -1,
    -1,   418,    -1,    -1,   421,   422,   423,    -1,    -1,    -1,
   427,    -1,    -1,    -1,    -1,    -1,    -1,    25,   125,   126,
    -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,    -1,
    -1,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,
    78,    79,    80,    81,    82,    83,   342,    -1,    86,    26,
    88,    89,    90,    91,    92,    93,    94,    -1,   195,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,
    47,    -1,    -1,    -1,    51,    -1,    53,    -1,    -1,    -1,
    -1,   377,    -1,   379,   380,   381,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    -1,    -1,
    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   247,    -1,    -1,   250,    -1,   252,    -1,    -1,    95,    96,
    -1,   258,   418,    11,    -1,   421,   422,   423,    -1,    17,
    -1,   427,    -1,    21,   271,    -1,    -1,    -1,   275,    27,
    28,    -1,    -1,    -1,    32,   282,    34,    -1,    36,    -1,
    -1,    -1,    -1,    41,    42,    43,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    -1,
    58,    59,    60,   310,    -1,    -1,    -1,    -1,    -1,    11,
   317,   318,    -1,    -1,    -1,    17,    -1,    75,    -1,    21,
    -1,    -1,   329,   330,    -1,    27,    28,   334,    -1,   336,
    32,    -1,    34,    -1,    36,    -1,    -1,    95,    96,    41,
    42,    43,    -1,    -1,    -1,    -1,    -1,   354,    -1,    51,
    -1,    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    -1,   383,   384,     0,    -1,
    -1,     3,   389,   390,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    95,    96,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,   425,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    75,    -1,    -1,     8,    -1,    10,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    75,    -1,    -1,     8,    -1,    10,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    75,    -1,    -1,     8,    -1,    10,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    75,    -1,    -1,     8,    -1,    10,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    75,    -1,    -1,     8,    -1,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    21,
    22,    -1,    -1,    95,    96,    27,    28,    29,    -1,    31,
    32,    33,    34,    35,    36,    37,    -1,    39,    11,    41,
    42,    43,    44,    -1,    17,    -1,    -1,    -1,    21,    51,
    -1,    53,    -1,    55,    27,    28,    58,    59,    60,    32,
    -1,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
    43,    -1,    -1,    75,    -1,    -1,    -1,    -1,    51,    -1,
    53,    -1,    55,    -1,    -1,    58,    59,    60,    -1,    11,
    -1,    -1,    -1,    95,    96,    17,    -1,    -1,    -1,    21,
    -1,    -1,    75,    -1,    -1,    27,    28,    -1,    -1,    -1,
    32,    -1,    34,    -1,    36,    -1,    -1,    -1,    11,    41,
    42,    43,    95,    96,    17,    -1,    -1,    -1,    21,    51,
    -1,    53,    -1,    55,    27,    28,    58,    59,    60,    32,
    -1,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
    43,    -1,    -1,    75,    -1,    -1,    -1,    -1,    51,    -1,
    53,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    11,
    -1,    -1,    -1,    95,    96,    17,    -1,    -1,    -1,    21,
    -1,    -1,    75,    -1,    -1,    27,    28,    -1,    -1,    -1,
    32,    -1,    34,    -1,    36,    -1,    -1,    -1,    11,    41,
    42,    43,    95,    96,    17,    -1,    -1,    -1,    -1,    51,
    -1,    53,    -1,    -1,    27,    28,    58,    59,    60,    32,
    -1,    34,    -1,    36,    37,    -1,    -1,    -1,    41,    42,
    43,    -1,    25,    75,    -1,    -1,    -1,    -1,    51,    -1,
    53,    -1,    -1,    -1,    11,    58,    59,    60,    -1,    -1,
    17,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    27,    28,    75,    -1,    -1,    32,    -1,    34,    -1,    36,
    -1,    -1,    -1,    -1,    41,    42,    43,    -1,    -1,    25,
    -1,    -1,    95,    96,    51,    -1,    53,    80,    81,    82,
    83,    58,    59,    60,    -1,    88,    89,    90,    91,    92,
    93,    94,    25,    -1,    50,    -1,    52,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    25,    -1,    -1,    50,    95,    96,
    76,    77,    78,    79,    80,    81,    82,    83,    61,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    50,
    -1,    52,    -1,    76,    77,    78,    79,    80,    81,    82,
    83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    25,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    25,    -1,    -1,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    50,
    -1,    52,    -1,    76,    77,    78,    79,    80,    81,    82,
    83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    49,    50,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    25,    -1,    -1,    -1,    -1,    76,
    77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    -1,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    50,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    76,    77,    78,    79,    80,    81,    82,    83,    50,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    61,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
    82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    76,
    77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    50,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
    82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    76,
    77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    50,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
    82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    49,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    50,
    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    49,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    76,    77,    78,    79,    80,    81,    82,    83,    50,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    25,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    76,    77,    78,    79,    80,    81,    82,    83,    25,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    -1,    -1,    -1,    -1,    76,    -1,    78,    79,    80,    81,
    82,    83,    25,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    78,    79,    80,    81,    82,    83,    -1,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
    83,    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,
    93,    94
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
   
#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "parse.y"
{dbgCoBlck("block: blck_function_expression");
    break;}
case 2:
#line 148 "parse.y"
{dbgCoBlck("block: ... blck_function_expression");
    break;}
case 3:
#line 150 "parse.y"
{dbgCoBlck("block: { block }");
    break;}
case 4:
#line 151 "parse.y"
{dbgCoBlck("block: ... { block }");
    break;}
case 5:
#line 153 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 6:
#line 154 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 7:
#line 156 "parse.y"
{dbgCoBlck("block: universal_single_block");
    break;}
case 8:
#line 157 "parse.y"
{dbgCoBlck("block: ... universal_single_block");
    break;}
case 11:
#line 163 "parse.y"
{dbg("single_block: function_expression");
    break;}
case 12:
#line 165 "parse.y"
{dbg("single_block: { block }");
    break;}
case 13:
#line 166 "parse.y"
{dbg("single_block: { }");
    break;}
case 14:
#line 168 "parse.y"
{dbg("single_block: universal_single_block");
    break;}
case 15:
#line 171 "parse.y"
{dbg("universal_single_block: a + 0;");
    break;}
case 16:
#line 172 "parse.y"
{dbg("universal_single_block: reserved_expressions");
    break;}
case 17:
#line 173 "parse.y"
{dbg("universal_single_block: variable initialization;");
    break;}
case 18:
#line 175 "parse.y"
{dbg("universal_single_block: operators");
    break;}
case 19:
#line 179 "parse.y"
{dbg("label: lbl1 :");
    break;}
case 20:
#line 180 "parse.y"
{dbg("label: ... lbl1 :");
    break;}
case 21:
#line 183 "parse.y"
{dbg("label_expression: label : blck_function_expression");
    break;}
case 22:
#line 184 "parse.y"
{dbg("label_expression: label : { block }");
    break;}
case 23:
#line 185 "parse.y"
{dbg("label_expression: label : { }");
    break;}
case 24:
#line 186 "parse.y"
{dbg("label_expression: label : universal_single_block");
    break;}
case 25:
#line 190 "parse.y"
{dbgCoOper("operators: if ()");
    break;}
case 26:
#line 192 "parse.y"
{dbgCoOper("operators: switch");
    break;}
case 27:
#line 194 "parse.y"
{dbgCoOper("operators: while");
    break;}
case 28:
#line 196 "parse.y"
{dbgCoOper("operators: for");
    break;}
case 29:
#line 198 "parse.y"
{dbgCoOper("operators: do ... while();");
    break;}
case 30:
#line 200 "parse.y"
{dbgCoOper("operators: try");;
    break;}
case 31:
#line 202 "parse.y"
{dbgCoOper("operators: throw");
    break;}
case 32:
#line 204 "parse.y"
{dbgCoOper("operators: return");
    break;}
case 33:
#line 206 "parse.y"
{dbgCoOper("operators: break");
    break;}
case 34:
#line 208 "parse.y"
{dbgCoOper("operators: continue");
    break;}
case 38:
#line 224 "parse.y"
{dbg("continue_operator: continue ;");
    break;}
case 39:
#line 225 "parse.y"
{dbg("continue_operator: continue a ;");
    break;}
case 40:
#line 228 "parse.y"
{dbg("break_operator: break ;");
    break;}
case 41:
#line 229 "parse.y"
{dbg("break_operator: break a ;");
    break;}
case 42:
#line 238 "parse.y"
{dbg("strange_expression: a : init_value");
    break;}
case 43:
#line 239 "parse.y"
{dbg("strange_expression: ... ; a : init_value");
    break;}
case 45:
#line 243 "parse.y"
{dbg("return_operator: return { strange_expression } ;");
    break;}
case 46:
#line 244 "parse.y"
{dbg("single_block: function_expression");
    break;}
case 47:
#line 245 "parse.y"
{dbg("single_block: universal_single_block");
    break;}
case 48:
#line 250 "parse.y"
{dbg("throw_operator: throw single_block");
    break;}
case 49:
#line 253 "parse.y"
{dbg("try_operator: try { block } catch_operator");
    break;}
case 50:
#line 254 "parse.y"
{dbg("try_operator: try { } catch_operator");
    break;}
case 51:
#line 255 "parse.y"
{dbg("try_operator: try { block } finally ...");
    break;}
case 52:
#line 258 "parse.y"
{dbg("finally_operator: finally { block }");
    break;}
case 53:
#line 259 "parse.y"
{dbg("finally_operator: finally { }");
    break;}
case 54:
#line 262 "parse.y"
{dbg("catch_operator: catch (a) { block }");
    break;}
case 55:
#line 263 "parse.y"
{dbg("catch_operator: catch (a) { }");
    break;}
case 56:
#line 264 "parse.y"
{dbg("catch_operator: catch { block }");
    break;}
case 57:
#line 265 "parse.y"
{dbg("catch_operator: catch { }");
    break;}
case 58:
#line 266 "parse.y"
{dbg("catch_operator: ... finally { block }");
    break;}
case 59:
#line 269 "parse.y"
{dbg("do_operator: do ... while(expression);");
    break;}
case 60:
#line 272 "parse.y"
{dbg("while_operator: while (expression) block");
    break;}
case 61:
#line 276 "parse.y"
{dbg("for_operator: for(i=0; i < 4; i++) block");
    break;}
case 62:
#line 277 "parse.y"
{dbg("for_operator: for(var i=0; i < 4; i++) block");
    break;}
case 65:
#line 286 "parse.y"
{dbg("switch_operator: (expression) { case_expression default_operator }");
    break;}
case 66:
#line 287 "parse.y"
{dbg("switch_operator: (expression) { default_operator }");
    break;}
case 67:
#line 290 "parse.y"
{dbg("default_operator: default: block");
    break;}
case 68:
#line 291 "parse.y"
{dbg("default_operator: <nothing>");
    break;}
case 69:
#line 294 "parse.y"
{dbg("case_expression: case 1: block");
    break;}
case 70:
#line 295 "parse.y"
{dbg("case_expression: ... case 1: block");
    break;}
case 71:
#line 296 "parse.y"
{dbg("case_expression: case 1:");
    break;}
case 72:
#line 297 "parse.y"
{dbg("case_expression: ... case 1:");
    break;}
case 73:
#line 304 "parse.y"
{dbg("if_operator: if (expression) block");
    break;}
case 74:
#line 305 "parse.y"
{dbg("if_operator: if (expression) single_stat_blck else single_stat_blck");
    break;}
case 75:
#line 313 "parse.y"
{dbg("var_init: var a...; (local variable)");
    break;}
case 76:
#line 314 "parse.y"
{dbg("var_init: a...; (global variable)");
    break;}
case 78:
#line 318 "parse.y"
{dbg("var: ...a");
    break;}
case 79:
#line 319 "parse.y"
{dbg("var: a = 0;");
    break;}
case 80:
#line 320 "parse.y"
{dbg("var: a = 0, ...");
    break;}
case 81:
#line 323 "parse.y"
{dbg("init_block: a : init_value");
    break;}
case 82:
#line 324 "parse.y"
{dbg("init_block: 'vara' : init_value");
    break;}
case 83:
#line 325 "parse.y"
{dbg("init_block: ['vara' + a] : init_value");
    break;}
case 84:
#line 326 "parse.y"
{dbg("init_block: ... obj(clone object)");
    break;}
case 88:
#line 331 "parse.y"
{dbg("init_block: ... , a : init_value");
    break;}
case 89:
#line 332 "parse.y"
{dbg("init_block: ... , 'vara' : init_value");
    break;}
case 90:
#line 333 "parse.y"
{dbg("init_block: ... , ['vara' + a] : init_value");
    break;}
case 91:
#line 334 "parse.y"
{dbg("init_block: ... , ...obj(clone object)");
    break;}
case 96:
#line 347 "parse.y"
{dbg("init_value: expression");
    break;}
case 97:
#line 348 "parse.y"
{dbg("init_value: function_expression");
    break;}
case 98:
#line 349 "parse.y"
{dbg("init_value: { init_block }");
    break;}
case 99:
#line 358 "parse.y"
{dbg("function: function literal_string (parameters) { func_body }");
    break;}
case 101:
#line 364 "parse.y"
{dbg("function: function func_name (parameters) { func_body }");
    break;}
case 102:
#line 365 "parse.y"
{dbg("function: (function func_name (parameters) { func_body }())");
    break;}
case 103:
#line 368 "parse.y"
{dbg("func_body: block");
    break;}
case 104:
#line 369 "parse.y"
{dbg("func_body: <nothing>");
    break;}
case 105:
#line 372 "parse.y"
{dbg("func_name: name");
    break;}
case 106:
#line 373 "parse.y"
{dbg("func_name: <nothing>");
    break;}
case 107:
#line 376 "parse.y"
{dbg("func_parameters: a");
    break;}
case 108:
#line 377 "parse.y"
{dbg("func_parameters: ... , a");
    break;}
case 109:
#line 378 "parse.y"
{dbg("func_parameters: <nothing>");
    break;}
case 111:
#line 392 "parse.y"
{dbgCoExpr("expression: assign_expression");
    break;}
case 112:
#line 393 "parse.y"
{dbgCoExpr("expression: shortened_expression");
    break;}
case 113:
#line 394 "parse.y"
{dbgCoExpr("expression: binary_expression");
    break;}
case 114:
#line 395 "parse.y"
{dbgCoExpr("expression: ternary_expression");
    break;}
case 115:
#line 396 "parse.y"
{dbgCoExpr("expression: unary_expression");
    break;}
case 116:
#line 397 "parse.y"
{dbgCoExpr("expression: new_expression");
    break;}
case 117:
#line 398 "parse.y"
{dbgCoExpr("expression: delete_expression");
    break;}
case 118:
#line 400 "parse.y"
{dbgCoExpr("expression: obj_and_method");
    break;}
case 119:
#line 402 "parse.y"
{dbgCoExpr("expression: literal_number");
    break;}
case 120:
#line 405 "parse.y"
{dbgCoExpr("expression: empty_expression");
    break;}
case 121:
#line 407 "parse.y"
{dbgCoExpr("expression: useful_words");
    break;}
case 122:
#line 409 "parse.y"
{dbgCoExpr("expression: typeof_operator");
    break;}
case 123:
#line 411 "parse.y"
{dbgCoExpr("expression: this");
    break;}
case 124:
#line 413 "parse.y"
{dbgCoExpr("expression: object instanceof constructor");
    break;}
case 125:
#line 415 "parse.y"
{dbgCoExpr("expression: property in object");
    break;}
case 130:
#line 427 "parse.y"
{dbgCoExpr("expression: (a+0)");
    break;}
case 131:
#line 428 "parse.y"
{dbgCoExpr("expression: (a+0)");
    break;}
case 132:
#line 431 "parse.y"
{dbg("in_expression: 'propA' in object");
    break;}
case 133:
#line 435 "parse.y"
{dbg("typeof_operator: typeof expression");
    break;}
case 134:
#line 438 "parse.y"
{dbg("shortened_expression: a += a");
    break;}
case 135:
#line 439 "parse.y"
{dbg("shortened_expression: a -= a");
    break;}
case 136:
#line 440 "parse.y"
{dbg("shortened_expression: a *= a");
    break;}
case 137:
#line 441 "parse.y"
{dbg("shortened_expression: a **= a");
    break;}
case 138:
#line 442 "parse.y"
{dbg("shortened_expression: a /= a");
    break;}
case 139:
#line 443 "parse.y"
{dbg("shortened_expression: a %= a");
    break;}
case 140:
#line 444 "parse.y"
{dbg("shortened_expression: a >>= a, a >>>= a");
    break;}
case 141:
#line 445 "parse.y"
{dbg("shortened_expression: a <<= a, a <<<= a");
    break;}
case 142:
#line 446 "parse.y"
{dbg("shortened_expression: a &= a");
    break;}
case 143:
#line 447 "parse.y"
{dbg("shortened_expression: a ^= a");
    break;}
case 144:
#line 448 "parse.y"
{dbg("shortened_expression: a |= a");
    break;}
case 145:
#line 461 "parse.y"
{dbg("assign_expression: this.a = 0");
    break;}
case 146:
#line 462 "parse.y"
{dbg("assign_expression: this.a = function_expression");
    break;}
case 147:
#line 463 "parse.y"
{dbg("assign_expression: a = { init_block }");
    break;}
case 148:
#line 467 "parse.y"
{dbg("new_expression: new a()");
    break;}
case 150:
#line 473 "parse.y"
{dbg("empty_expression: ;");
    break;}
case 151:
#line 476 "parse.y"
{dbg("useful_words: null");
    break;}
case 152:
#line 477 "parse.y"
{dbg("useful_words: true");
    break;}
case 153:
#line 478 "parse.y"
{dbg("useful_words: false");
    break;}
case 154:
#line 479 "parse.y"
{dbg("useful_words: undefined");
    break;}
case 155:
#line 480 "parse.y"
{dbg("useful_words: NaN");
    break;}
case 156:
#line 481 "parse.y"
{dbg("useful_words: Infinity");
    break;}
case 157:
#line 485 "parse.y"
{dbg("unary_expression: ++ a");
    break;}
case 158:
#line 486 "parse.y"
{dbg("unary_expression: ++ (a)");
    break;}
case 159:
#line 487 "parse.y"
{dbg("unary_expression: -- a");
    break;}
case 160:
#line 488 "parse.y"
{dbg("unary_expression: -- (a)");
    break;}
case 161:
#line 493 "parse.y"
{dbg("unary_expression: a ++");
    break;}
case 162:
#line 495 "parse.y"
{dbg("unary_expression: a --");
    break;}
case 163:
#line 497 "parse.y"
{dbg("unary_expression: !a");
    break;}
case 164:
#line 500 "parse.y"
{dbg("binary_expression: a * a");
    break;}
case 165:
#line 501 "parse.y"
{dbg("binary_expression: a / a");
    break;}
case 166:
#line 502 "parse.y"
{dbg("binary_expression: a % a");
    break;}
case 167:
#line 503 "parse.y"
{dbg("binary_expression: a - a");
    break;}
case 168:
#line 504 "parse.y"
{dbg("binary_expression: a + a");
    break;}
case 169:
#line 506 "parse.y"
{dbg("binary_expression: a && a");
    break;}
case 170:
#line 507 "parse.y"
{dbg("binary_expression: a || a");
    break;}
case 171:
#line 508 "parse.y"
{dbg("binary_expression: a == a, a === a");
    break;}
case 172:
#line 509 "parse.y"
{dbg("binary_expression: a != a, a !== a");
    break;}
case 173:
#line 510 "parse.y"
{dbg("binary_expression: a < a");
    break;}
case 174:
#line 511 "parse.y"
{dbg("binary_expression: a > a");
    break;}
case 175:
#line 512 "parse.y"
{dbg("binary_expression: a <= a");
    break;}
case 176:
#line 513 "parse.y"
{dbg("binary_expression: a >= a");
    break;}
case 177:
#line 515 "parse.y"
{dbg("binary_expression: a & a");
    break;}
case 178:
#line 516 "parse.y"
{dbg("binary_expression: a | a");
    break;}
case 179:
#line 517 "parse.y"
{dbg("binary_expression: a ^ a");
    break;}
case 180:
#line 518 "parse.y"
{dbg("binary_expression: a << a, a <<< a");
    break;}
case 181:
#line 519 "parse.y"
{dbg("binary_expression: a >> a, a >>> a");
    break;}
case 182:
#line 522 "parse.y"
{dbg("ternary_expression: (a > 0) ? 1 : 0");
    break;}
case 184:
#line 531 "parse.y"
{dbg("parameters: 1");
    break;}
case 185:
#line 532 "parse.y"
{dbg("parameters: function_expression");
    break;}
case 186:
#line 533 "parse.y"
{dbg("parameters: { init_block }");
    break;}
case 187:
#line 535 "parse.y"
{dbg("parameters: ... , 1");
    break;}
case 188:
#line 536 "parse.y"
{dbg("parameters: ... , function_expression");
    break;}
case 189:
#line 537 "parse.y"
{dbg("parameters: ... , { init_block }");
    break;}
case 190:
#line 540 "parse.y"
{dbg("object: ... ( parameters )");
    break;}
case 191:
#line 541 "parse.y"
{dbg("object: ... [ parameters ]");
    break;}
case 192:
#line 542 "parse.y"
{dbg("object: a");
    break;}
case 193:
#line 543 "parse.y"
{dbg("object: ... .a");
    break;}
case 194:
#line 544 "parse.y"
{dbg("object: this.a");
    break;}
case 197:
#line 555 "parse.y"
{dbg("Literal string")	;
    break;}
case 198:
#line 556 "parse.y"
{dbg("Constant string");;
    break;}
case 199:
#line 557 "parse.y"
{dbg("Literal number")	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 561 "parse.y"


void yyYaccInit() {}
void yyYaccCleanup() {}

/*  A Bison parser, made from parse.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ABSTRACT	258
#define	BOOLEAN	259
#define	BREAK	260
#define	BYTE	261
#define	CASE	262
#define	CATCH	263
#define	CHAR	264
#define	CLASS	265
#define	CONST	266
#define	CONTINUE	267
#define	DEBUGGER	268
#define	DEFAULT	269
#define	DELETE	270
#define	DO	271
#define	DOUBLE	272
#define	ELSE	273
#define	ENUM	274
#define	EXPORT	275
#define	EXTENDS	276
#define	FALSE	277
#define	FINAL	278
#define	FINALLY	279
#define	FLOAT	280
#define	FOR	281
#define	FUNCTION	282
#define	GOTO	283
#define	IF	284
#define	IMPLEMENTS	285
#define	IMPORT	286
#define	IN	287
#define	INSTANCEOF	288
#define	INT	289
#define	INTERFACE	290
#define	LONG	291
#define	NATIVE	292
#define	NEW	293
#define	NUL	294
#define	PACKAGE	295
#define	PRIVATE	296
#define	PROTECTED	297
#define	PUBLIC	298
#define	RETURN	299
#define	SHORT	300
#define	STATIC	301
#define	SUPER	302
#define	SWITCH	303
#define	SYNCHRONIZED	304
#define	THIS	305
#define	THROW	306
#define	THROWS	307
#define	TRANSIENT	308
#define	TRUE	309
#define	TRY	310
#define	TYPEOF	311
#define	VAR	312
#define	VOID	313
#define	VOLATILE	314
#define	WHILE	315
#define	WITH	316
#define	UNDEFINED	317
#define	NAN	318
#define	INFINITY	319
#define	DOT	320
#define	COMA	321
#define	COLON	322
#define	QMARK	323
#define	LBRACKET_ROUND	324
#define	RBRACKET_ROUND	325
#define	LBRACKET_SQUARE	326
#define	RBRACKET_SQUARE	327
#define	LBRACKET_CURLY	328
#define	RBRACKET_CURLY	329
#define	INT_NUM	330
#define	LITERAL_NUMBER	331
#define	OBJ_NAME	332
#define	CSTRING	333
#define	END_OP	334
#define	ENDLINE	335
#define	OP_ASSIGN	336
#define	OP_ASSIGN_ADD	337
#define	OP_ASSIGN_SUB	338
#define	OP_ASSIGN_MUL	339
#define	OP_ASSIGN_POW	340
#define	OP_ASSIGN_DIV	341
#define	OP_ASSIGN_MOD	342
#define	OP_ASSIGN_LSHIFT	343
#define	OP_ASSIGN_RSHIFT	344
#define	OP_ASSIGN_AND	345
#define	OP_ASSIGN_XOR	346
#define	OP_ASSIGN_OR	347
#define	OPL_NOT	348
#define	OPL_AND	349
#define	OPL_OR	350
#define	OPL_EQ	351
#define	OPL_NEQ	352
#define	OPL_L	353
#define	OPL_G	354
#define	OPL_GE	355
#define	OPL_LE	356
#define	OPB_NOT	357
#define	OPB_OR	358
#define	OPB_AND	359
#define	OPB_XOR	360
#define	OPB_LSHIFT	361
#define	OPB_RSHIFT	362
#define	OPA_MUL	363
#define	OPA_DIV	364
#define	OPA_MOD	365
#define	OPA_ADD	366
#define	OPA_SUB	367
#define	OPA_INC	368
#define	OPA_DEC	369
#define	OPA_POW	370
#define	NO_ELSE	371

#line 83 "parse.y"
	
	#include <malloc.h>
	#include "KurCommon.h"
	
	#ifdef _DEBUG
	#define dbgCoBlck(str) SetTextColor(LIGHT_BLUE);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoExpr(str) SetTextColor(LIGHT_YELLOW);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoOper(str) SetTextColor(LIGHT_GREEN);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbg(str) std::cout << str << std::endl;
	#else
	#define dbgCoBlck(str)
	#define dbgCoExpr(str)
	#define dbgCoOper(str)
	#define dbg(str)
	#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		381
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 162)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     9,    12,    15,    19,    23,    28,    31,
    35,    37,    40,    44,    46,    48,    50,    52,    54,    56,
    58,    60,    62,    64,    67,    71,    74,    78,    82,    88,
    94,    98,   102,   108,   113,   119,   124,   128,   136,   143,
   148,   152,   158,   166,   172,   182,   192,   200,   208,   217,
   225,   229,   230,   235,   241,   245,   250,   256,   264,   267,
   269,   272,   276,   279,   283,   285,   288,   292,   294,   298,
   300,   304,   308,   312,   318,   323,   329,   335,   343,   350,
   351,   353,   355,   359,   368,   377,   379,   380,   382,   383,
   385,   389,   390,   394,   396,   398,   400,   402,   404,   406,
   408,   410,   412,   414,   416,   418,   420,   422,   425,   429,
   433,   437,   441,   445,   449,   453,   457,   461,   465,   469,
   471,   475,   477,   481,   485,   489,   495,   501,   504,   507,
   508,   510,   512,   514,   516,   518,   520,   523,   528,   531,
   536,   539,   542,   545,   549,   553,   557,   561,   565,   569,
   573,   577,   581,   585,   589,   593,   597,   601,   605,   609,
   613,   617,   623,   625,   627,   629,   633,   637,   641,   647,
   652,   657,   659,   663,   667,   669,   671
};

static const short yyrhs[] = {   144,
    79,     0,   117,   144,    79,     0,   139,     0,   117,   139,
     0,   135,    79,     0,   117,   135,    79,     0,    73,   117,
    74,     0,   117,    73,   117,    74,     0,    73,    74,     0,
   117,    73,    74,     0,   118,     0,   117,   118,     0,   117,
   159,    67,     0,   133,     0,   130,     0,   128,     0,   129,
     0,   127,     0,   124,     0,   123,     0,   122,     0,   120,
     0,   119,     0,    12,    79,     0,    12,   159,    79,     0,
     5,    79,     0,     5,   159,    79,     0,   159,    67,   138,
     0,   121,    79,   159,    67,   138,     0,    44,    73,   121,
    74,    79,     0,    44,   144,    79,     0,    51,   144,    79,
     0,    55,    73,   117,    74,   126,     0,    55,    73,    74,
   126,     0,    55,    73,   117,    74,   125,     0,    24,    73,
   117,    74,     0,    24,    73,    74,     0,     8,    69,   159,
    70,    73,   117,    74,     0,     8,    69,   159,    70,    73,
    74,     0,     8,    73,   117,    74,     0,     8,    73,    74,
     0,   126,    24,    73,   117,    74,     0,    16,   134,    60,
    69,   144,    70,    79,     0,    60,    69,   144,    70,   134,
     0,    26,    69,   144,    79,   144,    79,   144,    70,   134,
     0,    26,    69,   135,    79,   144,    79,   144,    70,   134,
     0,    26,    69,   135,    32,   158,    70,   134,     0,    26,
    69,   159,    32,   158,    70,   134,     0,    48,    69,   144,
    70,    73,   132,   131,    74,     0,    48,    69,   144,    70,
    73,   131,    74,     0,    14,    67,   117,     0,     0,     7,
   144,    67,   117,     0,   132,     7,   144,    67,   117,     0,
     7,   144,    67,     0,   132,     7,   144,    67,     0,    29,
    69,   144,    70,   134,     0,    29,    69,   144,    70,   134,
    18,   134,     0,   144,    79,     0,   140,     0,   135,    79,
     0,    73,   117,    74,     0,    73,    74,     0,   159,    67,
   134,     0,   118,     0,    57,   136,     0,   148,    66,   136,
     0,   159,     0,   136,    66,   159,     0,   148,     0,   136,
    66,   148,     0,   159,    67,   138,     0,   160,    67,   138,
     0,    71,   144,    72,    67,   138,     0,    65,    65,    65,
   158,     0,   137,    66,   159,    67,   138,     0,   137,    66,
   160,    67,   138,     0,   137,    66,    71,   144,    72,    67,
   138,     0,   137,    66,    65,    65,    65,   158,     0,     0,
   144,     0,   140,     0,    73,   137,    74,     0,    27,   159,
    69,   143,    70,    73,   141,    74,     0,    27,   142,    69,
   143,    70,    73,   141,    74,     0,   117,     0,     0,   159,
     0,     0,   159,     0,   143,    66,   159,     0,     0,    69,
   144,    70,     0,   148,     0,   146,     0,   154,     0,   155,
     0,   153,     0,   149,     0,   150,     0,   156,     0,   161,
     0,   160,     0,   151,     0,   152,     0,   145,     0,    50,
     0,    56,   144,     0,   158,    82,   144,     0,   158,    83,
   144,     0,   158,    84,   144,     0,   158,    85,   144,     0,
   158,    86,   144,     0,   158,    87,   144,     0,   158,    88,
   144,     0,   158,    89,   144,     0,   158,    90,   144,     0,
   158,    91,   144,     0,   158,    92,   144,     0,   144,     0,
   147,    66,   144,     0,   140,     0,   147,    66,   140,     0,
   158,    81,   144,     0,   158,    81,   140,     0,   158,    81,
    73,   137,    74,     0,   158,    81,    71,   147,    72,     0,
    38,   144,     0,    15,   158,     0,     0,    39,     0,    54,
     0,    22,     0,    62,     0,    63,     0,    64,     0,   113,
   158,     0,   113,    69,   158,    70,     0,   114,   158,     0,
   114,    69,   158,    70,     0,   158,   113,     0,   158,   114,
     0,    93,   144,     0,   144,   108,   144,     0,   144,   109,
   144,     0,   144,   110,   144,     0,   144,   112,   144,     0,
   144,   111,   144,     0,   144,    94,   144,     0,   144,    95,
   144,     0,   144,    96,   144,     0,   144,    97,   144,     0,
   144,    98,   144,     0,   144,    99,   144,     0,   144,   100,
   144,     0,   144,   101,   144,     0,   144,   104,   144,     0,
   144,   103,   144,     0,   144,   105,   144,     0,   144,   106,
   144,     0,   144,   107,   144,     0,   144,    68,   144,    67,
   144,     0,   158,     0,   144,     0,   140,     0,    73,   137,
    74,     0,   157,    66,   144,     0,   157,    66,   140,     0,
   157,    66,    73,   137,    74,     0,   158,    69,   157,    70,
     0,   158,    71,   157,    72,     0,   159,     0,   158,    65,
   159,     0,    50,    65,   159,     0,    77,     0,    78,     0,
    76,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   138,   140,   142,   143,   145,   146,   148,   149,   151,   152,
   154,   155,   157,   160,   163,   165,   167,   169,   171,   173,
   175,   177,   179,   181,   183,   185,   187,   194,   196,   198,
   200,   203,   206,   208,   209,   211,   213,   215,   217,   218,
   219,   220,   222,   225,   228,   230,   231,   232,   236,   238,
   240,   242,   244,   246,   247,   248,   255,   257,   259,   262,
   264,   266,   268,   270,   272,   279,   281,   283,   285,   286,
   287,   289,   291,   292,   293,   295,   296,   297,   298,   299,
   301,   303,   304,   310,   313,   316,   318,   320,   322,   324,
   326,   327,   333,   341,   342,   343,   344,   345,   346,   347,
   349,   351,   352,   355,   357,   359,   361,   366,   370,   372,
   373,   374,   375,   376,   377,   378,   379,   380,   381,   383,
   385,   387,   388,   390,   392,   393,   394,   396,   399,   402,
   405,   407,   408,   409,   410,   411,   413,   416,   417,   418,
   423,   425,   427,   429,   431,   432,   433,   434,   436,   437,
   438,   439,   440,   441,   442,   443,   445,   446,   447,   448,
   449,   451,   456,   460,   462,   463,   465,   466,   467,   469,
   471,   472,   473,   474,   483,   484,   485
};

static const char * const yytname[] = {   "$","error","$undefined.","ABSTRACT",
"BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST","CONTINUE","DEBUGGER",
"DEFAULT","DELETE","DO","DOUBLE","ELSE","ENUM","EXPORT","EXTENDS","FALSE","FINAL",
"FINALLY","FLOAT","FOR","FUNCTION","GOTO","IF","IMPLEMENTS","IMPORT","IN","INSTANCEOF",
"INT","INTERFACE","LONG","NATIVE","NEW","NUL","PACKAGE","PRIVATE","PROTECTED",
"PUBLIC","RETURN","SHORT","STATIC","SUPER","SWITCH","SYNCHRONIZED","THIS","THROW",
"THROWS","TRANSIENT","TRUE","TRY","TYPEOF","VAR","VOID","VOLATILE","WHILE","WITH",
"UNDEFINED","NAN","INFINITY","DOT","COMA","COLON","QMARK","LBRACKET_ROUND","RBRACKET_ROUND",
"LBRACKET_SQUARE","RBRACKET_SQUARE","LBRACKET_CURLY","RBRACKET_CURLY","INT_NUM",
"LITERAL_NUMBER","OBJ_NAME","CSTRING","END_OP","ENDLINE","OP_ASSIGN","OP_ASSIGN_ADD",
"OP_ASSIGN_SUB","OP_ASSIGN_MUL","OP_ASSIGN_POW","OP_ASSIGN_DIV","OP_ASSIGN_MOD",
"OP_ASSIGN_LSHIFT","OP_ASSIGN_RSHIFT","OP_ASSIGN_AND","OP_ASSIGN_XOR","OP_ASSIGN_OR",
"OPL_NOT","OPL_AND","OPL_OR","OPL_EQ","OPL_NEQ","OPL_L","OPL_G","OPL_GE","OPL_LE",
"OPB_NOT","OPB_OR","OPB_AND","OPB_XOR","OPB_LSHIFT","OPB_RSHIFT","OPA_MUL","OPA_DIV",
"OPA_MOD","OPA_ADD","OPA_SUB","OPA_INC","OPA_DEC","OPA_POW","NO_ELSE","block",
"operators","continue_operator","break_operator","strange_expression","return_operator",
"throw_operator","try_operator","finally_operator","catch_operator","do_operator",
"while_operator","for_operator","switch_operator","default_operator","case_expression",
"if_operator","single_block","var_init","var","init_block","init_value","blck_function_expression",
"function_expression","func_body","func_name","func_parameters","expression",
"typeof_operator","shortened_expression","expression_enum","assign_expression",
"new_expression","delete_expression","empty_expression","useful_words","unary_expression",
"binary_expression","ternary_expression","obj_and_method","parameters","object",
"literal_string","constant_string","literal_number",""
};
#endif

static const short yyr1[] = {     0,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   119,   119,   120,   120,   121,   121,   122,
   122,   123,   124,   124,   124,   125,   125,   126,   126,   126,
   126,   126,   127,   128,   129,   129,   129,   129,   130,   130,
   131,   131,   132,   132,   132,   132,   133,   133,   134,   134,
   134,   134,   134,   134,   134,   135,   135,   136,   136,   136,
   136,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   138,   138,   138,   139,   140,   141,   141,   142,   142,   143,
   143,   143,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   145,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   147,
   147,   147,   147,   148,   148,   148,   148,   149,   150,   151,
   152,   152,   152,   152,   152,   152,   153,   153,   153,   153,
   153,   153,   153,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   155,   156,   157,   157,   157,   157,   157,   157,   158,
   158,   158,   158,   158,   159,   160,   161
};

static const short yyr2[] = {     0,
     2,     3,     1,     2,     2,     3,     3,     4,     2,     3,
     1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     3,     2,     3,     3,     5,     5,
     3,     3,     5,     4,     5,     4,     3,     7,     6,     4,
     3,     5,     7,     5,     9,     9,     7,     7,     8,     7,
     3,     0,     4,     5,     3,     4,     5,     7,     2,     1,
     2,     3,     2,     3,     1,     2,     3,     1,     3,     1,
     3,     3,     3,     5,     4,     5,     5,     7,     6,     0,
     1,     1,     3,     8,     8,     1,     0,     1,     0,     1,
     3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     3,     1,     3,     3,     3,     5,     5,     2,     2,     0,
     1,     1,     1,     1,     1,     1,     2,     4,     2,     4,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     1,     1,     1,     3,     3,     3,     5,     4,
     4,     1,     3,     3,     1,     1,     1
};

static const short yydefact[] = {   130,
     0,     0,     0,   130,   133,     0,     0,     0,   130,   131,
   130,     0,   107,   130,   132,     0,   130,     0,     0,   134,
   135,   136,   130,   130,   177,   175,   176,   130,     0,     0,
   130,    11,    23,    22,    21,    20,    19,    18,    16,    17,
    15,    14,     0,     3,     0,   106,    95,    94,    99,   100,
   104,   105,    98,    96,    97,   101,   163,   172,   103,   102,
    26,     0,    24,     0,     0,   129,    89,   130,    65,     0,
     0,    60,     0,   172,   130,     0,   130,   128,    94,     0,
     0,   130,     0,     0,   130,   108,    66,    70,     0,   172,
   130,     0,     9,   130,   143,     0,   137,     0,   139,   130,
    12,     0,     4,     0,   172,     5,   130,     1,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,     0,     0,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   141,   142,    27,    25,     0,    88,    63,   130,
     0,    61,    59,   130,     0,     0,   172,    92,     0,     0,
     0,    31,     0,   174,    32,     0,   130,     0,     0,    93,
     7,     0,     0,    10,   130,     6,     2,    13,     0,   149,
   150,   151,   152,   153,   154,   155,   156,   158,   157,   159,
   160,   161,   144,   145,   146,   148,   147,    67,   173,    80,
   165,   164,     0,     0,   130,    80,   125,   124,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,    92,
    62,   130,    64,     0,   130,   130,     0,     0,    90,   130,
     0,     0,   130,     0,     0,    34,     0,    71,   172,   130,
   138,   140,     8,   130,     0,   130,     0,     0,     0,   130,
   170,   171,   122,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    57,    30,     0,    80,    28,    82,
    81,    52,     0,   130,     0,     0,    35,    33,    44,   162,
     0,     0,     0,   166,   130,   130,    80,   168,   167,   130,
   127,   126,     0,     0,   130,   130,   130,   130,    91,   130,
   130,   130,     0,   130,     0,     0,    52,     0,    41,   130,
   130,   130,     0,     0,     0,   130,     0,     0,    72,    73,
     0,   123,   121,   130,    43,    47,     0,     0,    48,   130,
     0,    58,    29,    83,     0,   130,    50,   130,     0,     0,
    40,   130,    37,   130,    75,   130,     0,     0,   130,   130,
   169,     0,   130,   130,    84,   130,   130,     0,    49,   130,
    42,    36,    74,     0,     0,    76,    77,    85,    46,    45,
   130,   130,    39,   130,    79,   130,   130,    38,    78,     0,
     0
};

static const short yydefgoto[] = {   330,
    32,    33,    34,   160,    35,    36,    37,   277,   236,    38,
    39,    40,    41,   306,   307,    42,    70,    43,    87,   247,
   269,    44,    72,   331,   147,   228,    45,    46,    47,   255,
    79,    49,    50,    51,    52,    53,    54,    55,    56,   203,
    57,    58,    59,    60
};

static const short yypact[] = {  2624,
    44,    51,   -35,  2703,-32768,   -53,   -51,   -42,  2954,-32768,
  2842,     2,    18,  2954,-32768,    11,  2954,   -35,    23,-32768,
-32768,-32768,  2954,  1202,-32768,-32768,-32768,  2954,   -41,   -29,
   803,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    20,-32768,  3014,-32768,-32768,    39,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   354,-32768,-32768,-32768,
-32768,    36,-32768,    50,    18,    75,   -51,  1281,-32768,    71,
    70,-32768,  3037,    74,  2875,    86,  2954,-32768,-32768,   -51,
  3060,  2954,   -51,  3083,  1360,-32768,    91,-32768,   -28,   -21,
  2954,  3105,-32768,  1439,-32768,   -35,    75,   -35,    75,  1518,
-32768,    84,-32768,  3128,   105,-32768,  2954,-32768,  2954,  2954,
  2954,  2954,  2954,  2954,  2954,  2954,  2954,  2954,  2954,  2954,
  2954,  2954,  2954,  2954,  2954,  2954,   -35,   -51,   627,   627,
   165,  2954,  2954,  2954,  2954,  2954,  2954,  2954,  2954,  2954,
  2954,  2954,-32768,-32768,-32768,-32768,   104,-32768,-32768,  1597,
   107,-32768,-32768,  2703,   -19,  3151,   142,   -51,  3173,    12,
   110,-32768,  3196,-32768,-32768,   171,  1676,   -35,  3218,-32768,
-32768,    47,   100,-32768,  1755,-32768,-32768,-32768,   677,   445,
  3487,  2744,  2744,    27,    27,    27,    27,   474,  2691,  2965,
   136,   136,-32768,-32768,-32768,   -58,   -58,    91,-32768,    25,
-32768,  3449,    38,     7,  2921,    25,-32768,  3449,  3449,  3449,
  3449,  3449,  3449,  3449,  3449,  3449,  3449,  3449,  3449,   -51,
-32768,  2954,-32768,   -35,  2954,  2954,   -35,    77,-32768,  2703,
   103,   -51,  2756,   111,    83,   159,    15,-32768,   -20,  2703,
-32768,-32768,-32768,  2954,   121,  2954,   -49,   123,   135,  2809,
-32768,-32768,-32768,  3449,     8,   -44,    94,  3241,   126,  3264,
  3287,   143,   -51,   115,   175,-32768,   138,    25,-32768,-32768,
  3449,    40,   -51,  1834,   137,   144,-32768,   159,-32768,  3468,
   151,  3332,    42,-32768,  2756,  2756,    25,-32768,  3449,  2921,
-32768,-32768,   145,   130,  2703,  2954,  2954,  2703,-32768,  1913,
  2703,  2756,    -9,  2954,   153,   149,    62,   163,-32768,  1992,
  2624,  2071,   -35,   168,   174,  2954,   182,   187,-32768,-32768,
    -2,-32768,  3449,  1913,-32768,-32768,  3351,  3396,-32768,  2150,
   181,-32768,-32768,-32768,  2945,  2624,-32768,  2954,   183,   186,
-32768,  2229,-32768,  2308,    75,  2756,   191,  3415,  2756,  2756,
-32768,   188,  2703,  2703,-32768,   883,  2387,  2991,-32768,  2466,
-32768,-32768,-32768,   -35,   193,-32768,-32768,-32768,-32768,-32768,
   963,  1043,-32768,  2545,    75,  2756,  1123,-32768,-32768,   264,
-32768
};

static const short yypgoto[] = {    10,
   469,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    28,-32768,
-32768,-32768,-32768,   -40,-32768,-32768,  -153,    57,   139,  -198,
  -283,   257,  -124,   -56,-32768,    49,   372,-32768,-32768,-32768,
     0,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   140,
    26,    31,  -186,-32768
};


#define	YYLAST		3599


static const short yytable[] = {    48,
   223,   319,   320,    48,   201,   201,   207,   256,    65,    31,
   -68,   -69,   224,   249,    65,    75,   283,    88,   333,   249,
    65,   283,   235,    48,   284,    26,    77,    96,    66,   292,
    48,    62,    64,    94,    74,    26,   128,    76,   276,    98,
   129,    26,   130,    89,   -68,   -69,   304,    26,    90,   122,
   123,   124,   131,   305,    97,    99,   283,   -68,   -69,   225,
    71,   105,   363,   283,   334,   366,   367,    48,   338,   303,
    82,   351,   250,   290,    48,   305,   265,   150,   252,   291,
   253,   249,    83,    85,    48,   231,   279,   102,   321,   245,
   232,    91,   379,    48,   167,   246,   318,   148,   106,    48,
   249,    26,    27,   250,   127,   157,   315,   251,   270,   175,
   161,   128,   316,   164,   145,   129,   241,   130,    26,    27,
    26,   172,    61,   173,   105,   288,    88,    26,   146,    63,
   151,   155,   120,   121,   122,   123,   124,   125,   126,   128,
   154,   326,   263,   129,   329,   130,   264,   332,   152,    48,
   102,   273,    89,    48,   158,   274,   168,    90,   199,   263,
   270,   270,   176,   293,   128,   322,    48,   238,   129,   242,
   130,   178,   220,   227,    48,   222,   233,   270,   235,     3,
   105,   266,   275,   272,    74,   281,     5,   300,   229,   285,
   128,    67,   301,    89,   129,   295,   130,   105,   239,   369,
   370,   286,     9,    10,   302,   105,   102,   128,   325,   311,
    71,   129,   298,   130,    13,   313,   312,   324,    15,   336,
    17,   270,   337,   102,   270,   270,    20,    21,    22,    48,
   248,   102,   340,    23,   346,   205,   248,   206,   347,    48,
    25,    26,    27,   122,   123,   124,   125,   126,   349,   259,
   229,   270,   262,   350,   355,   364,   359,    28,   360,   376,
    74,   368,   267,   381,   278,   198,   339,   352,   257,   204,
    74,     0,     0,    48,     0,     0,     0,    29,    30,     0,
     0,     0,     0,   310,     0,     0,    71,   103,     0,     0,
     0,     0,     0,   299,    48,     0,    71,    48,   248,    48,
    48,     0,     0,   308,     0,     0,     0,     0,     0,    48,
    48,    48,     0,   317,     0,     0,     0,   248,     0,     0,
   342,   344,     0,    48,     0,    74,     0,     0,    74,    48,
     0,    74,     0,     0,     0,    48,     0,     0,   345,     0,
   105,    48,     0,    48,     0,   357,     0,     0,     0,     0,
   103,    71,    48,    48,    71,    48,    48,    71,     0,    48,
   105,     0,     0,     0,     0,   371,   102,     0,     0,   374,
    48,    48,   105,    48,   105,    73,    48,     0,     0,     0,
    78,   377,    81,    74,    74,    84,   102,   105,    86,   375,
     0,     0,     0,     0,    92,     0,     0,     0,   102,    95,
   102,   105,   104,     0,   105,     0,   103,   105,     0,    71,
    71,     0,     0,   102,     0,     0,     0,     0,   128,     0,
     0,     0,   129,   103,   130,     0,     0,   102,     0,     0,
   102,   103,     0,   102,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   156,     0,   159,     0,
     0,     0,     0,   163,     0,     0,     0,     0,     0,     0,
     0,     0,   169,     0,     0,   104,   143,   144,     0,     0,
     0,     0,    69,     0,     0,     0,     0,     0,   179,     0,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   196,   197,     0,   101,
   202,   202,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,     0,     0,     0,     0,     0,     0,
     0,   104,     0,     0,     0,    73,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   104,     0,
   111,   112,   113,   114,   115,   116,   104,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
     0,     0,   101,     0,     0,     0,   103,     0,     0,   111,
   112,   113,   114,   115,   116,     0,   254,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   103,     0,     0,     0,
     0,     0,     0,   258,     0,     0,   260,   261,   103,     0,
   103,    73,     0,     0,   271,     0,     0,     0,     0,     0,
     0,    73,     0,   103,     0,   280,     0,   282,   101,     0,
     0,   289,    69,     0,     0,     0,     0,   103,     0,     0,
   103,     0,     0,   103,     0,   101,     0,     0,     0,     0,
     0,     3,     0,   101,     0,     0,     0,     0,     5,     0,
     0,     0,     0,    67,     0,     0,   271,   271,     0,     0,
     0,   323,     0,     0,     9,    10,    73,   327,   328,    73,
     0,     0,    73,   271,     0,   335,    13,     0,     0,     0,
    15,   104,    17,     0,     0,     0,     0,   348,    20,    21,
    22,     0,     0,     0,     0,    23,     0,     0,    69,   200,
     0,   104,    25,    26,    27,     0,     0,     0,    69,   358,
     0,     0,     0,   104,     0,   104,     0,   271,     0,    28,
   271,   271,     0,     0,    73,    73,     0,     0,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
    30,     0,   104,   244,   107,   104,     0,   271,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    69,     0,     0,    69,     0,     0,    69,
   109,   110,   111,   112,   113,   114,   115,   116,   101,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   101,     0,
     0,     0,   380,     0,     0,     0,     0,     1,     0,     0,
   101,     0,   101,     0,     2,     0,     0,     3,     4,     0,
     0,    69,    69,     0,     5,   101,     0,     0,     6,     7,
     0,     8,     0,     0,     0,     0,     0,     0,     0,   101,
     9,    10,   101,     0,     0,   101,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,   100,     0,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     0,     1,     0,   -55,
     0,     0,     0,     0,     2,    28,   -55,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,     7,
     0,     8,     0,     0,     0,    29,    30,     0,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,    24,   -55,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     0,     1,     0,   -53,
     0,     0,     0,     0,     2,    28,   -53,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,     7,
     0,     8,     0,     0,     0,    29,    30,     0,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,   100,   -53,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     0,     1,     0,   -56,
     0,     0,     0,     0,     2,    28,   -56,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,     7,
     0,     8,     0,     0,     0,    29,    30,     0,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,    24,   -56,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     0,     1,     0,   -54,
     0,     0,     0,     0,     2,    28,   -54,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,     7,
     0,     8,     0,     0,     0,    29,    30,     0,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,   100,   -54,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     1,     0,     0,     0,
     0,     0,     0,     2,     0,    28,     3,     4,     0,     0,
     0,     0,     0,     5,     0,     0,     0,     6,     7,     0,
     8,     0,     0,     0,     0,    29,    30,     0,     0,     9,
    10,     0,     0,     0,     0,    11,     0,     0,     0,    12,
     0,    13,    14,     0,     0,    15,    16,    17,    18,     0,
     0,    19,     0,    20,    21,    22,     0,     0,     0,     0,
    23,     0,     0,     0,    24,    93,     0,    25,    26,    27,
     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
     0,     0,     2,     0,    28,     3,     4,     0,     0,     0,
     0,     0,     5,     0,     0,     0,     6,     7,     0,     8,
     0,     0,     0,     0,    29,    30,     0,     0,     9,    10,
     0,     0,     0,     0,    11,     0,     0,     0,    12,     0,
    13,    14,     0,     0,    15,    16,    17,    18,     0,     0,
    19,     0,    20,    21,    22,     0,     0,     0,     0,    23,
     0,     0,     0,    24,   149,     0,    25,    26,    27,     0,
     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
     0,     2,     0,    28,     3,     4,     0,     0,     0,     0,
     0,     5,     0,     0,     0,     6,     7,     0,     8,     0,
     0,     0,     0,    29,    30,     0,     0,     9,    10,     0,
     0,     0,     0,    11,     0,     0,     0,    12,     0,    13,
    14,     0,     0,    15,    16,    17,    18,     0,     0,    19,
     0,    20,    21,    22,     0,     0,     0,     0,    23,     0,
     0,     0,    24,   166,     0,    25,    26,    27,     0,     0,
     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     2,     0,    28,     3,     4,     0,     0,     0,     0,     0,
     5,     0,     0,     0,     6,     7,     0,     8,     0,     0,
     0,     0,    29,    30,     0,     0,     9,    10,     0,     0,
     0,     0,    11,     0,     0,     0,    12,     0,    13,    14,
     0,     0,    15,    16,    17,    18,     0,     0,    19,     0,
    20,    21,    22,     0,     0,     0,     0,    23,     0,     0,
     0,   100,   171,     0,    25,    26,    27,     0,     0,     0,
     0,     0,     1,     0,     0,     0,     0,     0,     0,     2,
     0,    28,     3,     4,     0,     0,     0,     0,     0,     5,
     0,     0,     0,     6,     7,     0,     8,     0,     0,     0,
     0,    29,    30,     0,     0,     9,    10,     0,     0,     0,
     0,    11,     0,     0,     0,    12,     0,    13,    14,     0,
     0,    15,    16,    17,    18,     0,     0,    19,     0,    20,
    21,    22,     0,     0,     0,     0,    23,     0,     0,     0,
    24,   174,     0,    25,    26,    27,     0,     0,     0,     0,
     0,     1,     0,     0,     0,     0,     0,     0,     2,     0,
    28,     3,     4,     0,     0,     0,     0,     0,     5,     0,
     0,     0,     6,     7,     0,     8,     0,     0,     0,     0,
    29,    30,     0,     0,     9,    10,     0,     0,     0,     0,
    11,     0,     0,     0,    12,     0,    13,    14,     0,     0,
    15,    16,    17,    18,     0,     0,    19,     0,    20,    21,
    22,     0,     0,     0,     0,    23,     0,     0,     0,   100,
   221,     0,    25,    26,    27,     0,     0,     0,     0,     0,
     1,     0,     0,     0,     0,     0,     0,     2,     0,    28,
     3,     4,     0,     0,     0,     0,     0,     5,     0,     0,
     0,     6,     7,     0,     8,     0,     0,     0,     0,    29,
    30,     0,     0,     9,    10,     0,     0,     0,     0,    11,
     0,     0,     0,    12,     0,    13,    14,     0,     0,    15,
    16,    17,    18,     0,     0,    19,     0,    20,    21,    22,
     0,     0,     0,     0,    23,     0,     0,     0,   100,   237,
     0,    25,    26,    27,     0,     0,     0,     0,     0,     1,
     0,     0,     0,     0,     0,     0,     2,     0,    28,     3,
     4,     0,     0,     0,     0,     0,     5,     0,     0,     0,
     6,     7,     0,     8,     0,     0,     0,     0,    29,    30,
     0,     0,     9,    10,     0,     0,     0,     0,    11,     0,
     0,     0,    12,     0,    13,    14,     0,     0,    15,    16,
    17,    18,     0,     0,    19,     0,    20,    21,    22,     0,
     0,     0,     0,    23,     0,     0,     0,   100,   243,     0,
    25,    26,    27,     0,     0,     0,     0,     0,     1,     0,
     0,     0,     0,     0,     0,     2,     0,    28,     3,     4,
     0,     0,     0,     0,     0,     5,     0,     0,     0,     6,
     7,     0,     8,     0,     0,     0,     0,    29,    30,     0,
     0,     9,    10,     0,     0,     0,     0,    11,     0,     0,
     0,    12,     0,    13,    14,     0,     0,    15,    16,    17,
    18,     0,     0,    19,     0,    20,    21,    22,     0,     0,
     0,     0,    23,     0,     0,     0,    24,   309,     0,    25,
    26,    27,     0,     0,     0,     0,     0,     1,     0,     0,
     0,     0,     0,     0,     2,     0,    28,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,     7,
     0,     8,     0,     0,     0,     0,    29,    30,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     0,    23,     0,     0,     0,    24,   -87,     0,    25,    26,
    27,     0,     0,     0,     0,     0,     1,     0,     0,     0,
     0,     0,     0,     2,     0,    28,     3,     4,     0,     0,
     0,     0,     0,     5,     0,     0,     0,     6,     7,     0,
     8,     0,     0,     0,     0,    29,    30,     0,     0,     9,
    10,     0,     0,     0,     0,    11,     0,     0,     0,    12,
     0,    13,    14,     0,     0,    15,    16,    17,    18,     0,
     0,    19,     0,    20,    21,    22,     0,     0,     0,     0,
    23,     0,     0,     0,   100,   341,     0,    25,    26,    27,
     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
     0,     0,     2,     0,    28,     3,     4,     0,     0,     0,
     0,     0,     5,     0,     0,     0,     6,     7,     0,     8,
     0,     0,     0,     0,    29,    30,     0,     0,     9,    10,
     0,     0,     0,     0,    11,     0,     0,     0,    12,     0,
    13,    14,     0,     0,    15,    16,    17,    18,     0,     0,
    19,     0,    20,    21,    22,     0,     0,     0,     0,    23,
     0,     0,     0,    24,   343,     0,    25,    26,    27,     0,
     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
     0,     2,     0,    28,     3,     4,     0,     0,     0,     0,
     0,     5,     0,     0,     0,     6,     7,     0,     8,     0,
     0,     0,     0,    29,    30,     0,     0,     9,    10,     0,
     0,     0,     0,    11,     0,     0,     0,    12,     0,    13,
    14,     0,     0,    15,    16,    17,    18,     0,     0,    19,
     0,    20,    21,    22,     0,     0,     0,     0,    23,     0,
     0,     0,   100,   -86,     0,    25,    26,    27,     0,     0,
     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     2,     0,    28,     3,     4,     0,     0,     0,     0,     0,
     5,     0,     0,     0,     6,     7,     0,     8,     0,     0,
     0,     0,    29,    30,     0,     0,     9,    10,     0,     0,
     0,     0,    11,     0,     0,     0,    12,     0,    13,    14,
     0,     0,    15,    16,    17,    18,     0,     0,    19,     0,
    20,    21,    22,     0,     0,     0,     0,    23,     0,     0,
     0,   100,   361,     0,    25,    26,    27,     0,     0,     0,
     0,     0,     1,     0,     0,     0,     0,     0,     0,     2,
     0,    28,     3,     4,     0,     0,     0,     0,     0,     5,
     0,     0,     0,     6,     7,     0,     8,     0,     0,     0,
     0,    29,    30,     0,     0,     9,    10,     0,     0,     0,
     0,    11,     0,     0,     0,    12,     0,    13,    14,     0,
     0,    15,    16,    17,    18,     0,     0,    19,     0,    20,
    21,    22,     0,     0,     0,     0,    23,     0,     0,     0,
   100,   362,     0,    25,    26,    27,     0,     0,     0,     0,
     0,     1,     0,     0,     0,     0,     0,     0,     2,     0,
    28,     3,     4,     0,     0,     0,     0,     0,     5,     0,
     0,     0,     6,     7,     0,     8,     0,     0,     0,     0,
    29,    30,     0,     0,     9,    10,     0,     0,     0,     0,
    11,     0,     0,     0,    12,     0,    13,    14,     0,     0,
    15,    16,    17,    18,     0,     0,    19,     0,    20,    21,
    22,     0,     0,     0,     0,    23,     0,     0,     0,   100,
   -51,     0,    25,    26,    27,     0,     0,     0,     0,     0,
     1,     0,     0,     0,     0,     0,     0,     2,     0,    28,
     3,     4,     0,     0,     0,     0,     0,     5,     0,     0,
     0,     6,     7,     0,     8,     0,     0,     0,     0,    29,
    30,     0,     0,     9,    10,     0,     0,     0,     0,    11,
     0,     0,     0,    12,     0,    13,    14,     0,     0,    15,
    16,    17,    18,     0,     0,    19,     0,    20,    21,    22,
     0,     0,     0,     0,    23,     0,     0,     0,    24,   373,
     0,    25,    26,    27,     0,     0,     0,     0,     0,     1,
     0,     0,     0,     0,     0,     0,     2,     0,    28,     3,
     4,     0,     0,     0,     0,     0,     5,     0,     0,     0,
     6,     7,     0,     8,     0,     0,     0,     0,    29,    30,
     0,     0,     9,    10,     0,     0,     0,     0,    11,     0,
     0,     0,    12,     0,    13,    14,     0,     0,    15,    16,
    17,    18,     0,     0,    19,     0,    20,    21,    22,     0,
     0,     0,     0,    23,     0,     0,     0,   100,   378,     0,
    25,    26,    27,     0,     0,     0,     0,     0,     1,     0,
     0,     0,     0,     0,     0,     2,     0,    28,     3,     4,
     0,     0,     0,     0,     0,     5,     0,     0,     0,     6,
     7,     0,     8,     0,     0,     0,     0,    29,    30,     0,
     0,     9,    10,     0,     0,     0,     0,    11,     0,     0,
     0,    12,     0,    13,    14,     0,     0,    15,    16,    17,
    18,     0,     0,    19,     0,    20,    21,    22,     0,     0,
     0,     0,    23,     0,     0,     0,    24,     0,     0,    25,
    26,    27,     0,     0,     0,     0,     0,     1,     0,     0,
     0,     0,     0,     0,     2,     0,    28,     3,     4,     0,
     0,     0,     0,     0,     5,     0,     0,     0,     6,    67,
     0,     8,     0,     0,     0,     0,    29,    30,     0,     0,
     9,    10,     0,     0,     0,     0,    11,     0,     0,     0,
    12,     0,    13,    14,     0,     0,    15,    16,    17,    18,
     0,     0,    19,     0,    20,    21,    22,     0,     0,     0,
     3,    23,     0,     0,     0,    68,     0,     5,    25,    26,
    27,     0,    67,     0,     0,     0,   111,   112,   113,   114,
   115,   116,     0,     9,    10,    28,   120,   121,   122,   123,
   124,   125,   126,     0,     0,    13,     0,     0,     0,    15,
     0,    17,     0,     0,     0,    29,    30,    20,    21,    22,
     0,     0,     0,     3,    23,     0,     0,     0,   268,     0,
     5,    25,    26,    27,     0,    67,     0,     0,     0,     0,
     0,   113,   114,   115,   116,     0,     9,    10,    28,   120,
   121,   122,   123,   124,   125,   126,     3,     0,    13,     0,
     0,     0,    15,     5,    17,     0,     0,     0,    29,    30,
    20,    21,    22,     0,     0,     0,     0,    23,     0,     9,
    10,   287,     0,     0,    25,    26,    27,     0,     0,     3,
     0,    13,     0,     0,     0,    15,     5,    17,     0,     0,
     0,    28,     0,    20,    21,    22,     0,     0,     0,     0,
    23,     0,     9,    10,    80,     0,     0,    25,    26,    27,
     0,    29,    30,     0,    13,     0,     0,     0,    15,     0,
    17,    18,     0,     0,    28,     3,    20,    21,    22,     0,
     0,     0,     5,    23,     0,     0,     0,    67,     0,     0,
    25,    26,    27,     0,    29,    30,     0,     0,     9,    10,
     0,     0,     0,     0,     0,     0,     0,    28,     3,     0,
    13,     0,     0,     0,    15,     5,    17,     0,     0,     0,
     0,     0,    20,    21,    22,     0,     0,    29,    30,    23,
     0,     9,    10,     0,     0,     0,    25,    26,    27,     0,
     0,     0,     0,    13,     0,     0,     0,    15,     0,    17,
     0,   356,   107,    28,     0,    20,    21,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,    25,
    26,    27,     0,    29,    30,     0,     0,     0,   109,   110,
   111,   112,   113,   114,   115,   116,    28,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   372,   107,     0,
   111,   112,   113,   114,   115,   116,    29,    30,   118,     0,
   120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
     0,   107,     0,     0,   109,   110,   111,   112,   113,   114,
   115,   116,   108,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,   107,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   153,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,     0,   107,     0,     0,
   109,   110,   111,   112,   113,   114,   115,   116,   162,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
   107,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   165,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   107,     0,   170,     0,   109,   110,   111,   112,
   113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   107,     0,     0,   109,   110,
   111,   112,   113,   114,   115,   116,   177,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,     0,   107,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   226,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   107,     0,   230,     0,   109,   110,   111,   112,   113,   114,
   115,   116,     0,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   107,     0,   234,   109,   110,   111,   112,
   113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   107,     0,   240,     0,   109,
   110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   107,     0,
   294,   109,   110,   111,   112,   113,   114,   115,   116,     0,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     0,   107,     0,     0,   109,   110,   111,   112,   113,   114,
   115,   116,   296,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,   107,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   297,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
   109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   107,
     0,     0,     0,   314,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   107,     0,
   353,     0,     0,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,     0,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   109,   110,   111,   112,   113,   114,
   115,   116,     0,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   107,     0,   354,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   107,     0,     0,     0,   365,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   109,   110,
   111,   112,   113,   114,   115,   116,   107,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   110,   111,   112,   113,   114,   115,   116,
     0,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   109,   110,   111,   112,   113,   114,   115,   116,     0,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   109,     0,   111,   112,   113,   114,   115,   116,     0,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126
};

static const short yycheck[] = {     0,
   154,   285,   286,     4,   129,   130,   131,   206,    50,     0,
    32,    32,    32,   200,    50,    69,    66,    18,   302,   206,
    50,    66,     8,    24,    74,    77,    69,    69,     3,    74,
    31,     1,     2,    24,     4,    77,    65,     7,    24,    69,
    69,    77,    71,    18,    66,    66,     7,    77,    18,   108,
   109,   110,    81,    14,    29,    30,    66,    79,    79,    79,
     4,    31,   346,    66,    74,   349,   350,    68,     7,   268,
    69,    74,    66,    66,    75,    14,   230,    68,    72,    72,
   205,   268,    65,    73,    85,    74,   240,    31,   287,    65,
    79,    69,   376,    94,    85,    71,   283,    67,    79,   100,
   287,    77,    78,    66,    66,    75,    65,    70,   233,   100,
    80,    65,    71,    83,    79,    69,    70,    71,    77,    78,
    77,    96,    79,    98,    94,   250,   127,    77,    79,    79,
    60,    75,   106,   107,   108,   109,   110,   111,   112,    65,
    67,   295,    66,    69,   298,    71,    70,   301,    79,   150,
    94,    69,   127,   154,    69,    73,    66,   127,   128,    66,
   285,   286,    79,    70,    65,   290,   167,   168,    69,    70,
    71,    67,    69,    32,   175,    69,    67,   302,     8,    15,
   150,    79,    24,    73,   154,    65,    22,    73,   158,    67,
    65,    27,    18,   168,    69,    70,    71,   167,   168,   353,
   354,    67,    38,    39,    67,   175,   150,    65,    79,    73,
   154,    69,    70,    71,    50,    65,    73,    73,    54,    67,
    56,   346,    74,   167,   349,   350,    62,    63,    64,   230,
   200,   175,    70,    69,    67,    71,   206,    73,    65,   240,
    76,    77,    78,   108,   109,   110,   111,   112,    67,   224,
   220,   376,   227,    67,    74,    65,    74,    93,    73,    67,
   230,    74,   232,     0,   237,   127,   307,   324,   220,   130,
   240,    -1,    -1,   274,    -1,    -1,    -1,   113,   114,    -1,
    -1,    -1,    -1,   274,    -1,    -1,   230,    31,    -1,    -1,
    -1,    -1,    -1,   263,   295,    -1,   240,   298,   268,   300,
   301,    -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,   310,
   311,   312,    -1,   283,    -1,    -1,    -1,   287,    -1,    -1,
   311,   312,    -1,   324,    -1,   295,    -1,    -1,   298,   330,
    -1,   301,    -1,    -1,    -1,   336,    -1,    -1,   313,    -1,
   310,   342,    -1,   344,    -1,   336,    -1,    -1,    -1,    -1,
    94,   295,   353,   354,   298,   356,   357,   301,    -1,   360,
   330,    -1,    -1,    -1,    -1,   356,   310,    -1,    -1,   360,
   371,   372,   342,   374,   344,     4,   377,    -1,    -1,    -1,
     9,   372,    11,   353,   354,    14,   330,   357,    17,   364,
    -1,    -1,    -1,    -1,    23,    -1,    -1,    -1,   342,    28,
   344,   371,    31,    -1,   374,    -1,   150,   377,    -1,   353,
   354,    -1,    -1,   357,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    69,   167,    71,    -1,    -1,   371,    -1,    -1,
   374,   175,    -1,   377,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    75,    -1,    77,    -1,
    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    94,   113,   114,    -1,    -1,
    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,   107,    -1,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,    -1,    31,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   150,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
    96,    97,    98,    99,   100,   101,   175,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,    94,    -1,    -1,    -1,   310,    -1,    -1,    96,
    97,    98,    99,   100,   101,    -1,   205,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   330,    -1,    -1,    -1,
    -1,    -1,    -1,   222,    -1,    -1,   225,   226,   342,    -1,
   344,   230,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
    -1,   240,    -1,   357,    -1,   244,    -1,   246,   150,    -1,
    -1,   250,   154,    -1,    -1,    -1,    -1,   371,    -1,    -1,
   374,    -1,    -1,   377,    -1,   167,    -1,    -1,    -1,    -1,
    -1,    15,    -1,   175,    -1,    -1,    -1,    -1,    22,    -1,
    -1,    -1,    -1,    27,    -1,    -1,   285,   286,    -1,    -1,
    -1,   290,    -1,    -1,    38,    39,   295,   296,   297,   298,
    -1,    -1,   301,   302,    -1,   304,    50,    -1,    -1,    -1,
    54,   310,    56,    -1,    -1,    -1,    -1,   316,    62,    63,
    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,   230,    73,
    -1,   330,    76,    77,    78,    -1,    -1,    -1,   240,   338,
    -1,    -1,    -1,   342,    -1,   344,    -1,   346,    -1,    93,
   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
   114,    -1,   371,    67,    68,   374,    -1,   376,   377,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   295,    -1,    -1,   298,    -1,    -1,   301,
    94,    95,    96,    97,    98,    99,   100,   101,   310,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   330,    -1,
    -1,    -1,     0,    -1,    -1,    -1,    -1,     5,    -1,    -1,
   342,    -1,   344,    -1,    12,    -1,    -1,    15,    16,    -1,
    -1,   353,   354,    -1,    22,   357,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,
    38,    39,   374,    -1,    -1,   377,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    -1,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
    -1,    -1,    -1,    -1,    12,    93,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,   113,   114,    -1,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
    -1,    -1,    -1,    -1,    12,    93,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,   113,   114,    -1,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
    -1,    -1,    -1,    -1,    12,    93,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,   113,   114,    -1,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
    -1,    -1,    -1,    -1,    12,    93,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,   113,   114,    -1,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,
    -1,    -1,    -1,    12,    -1,    93,    15,    16,    -1,    -1,
    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,    -1,
    29,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,    38,
    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,
    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,    -1,
    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,
    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,    78,
    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,
    -1,    -1,    12,    -1,    93,    15,    16,    -1,    -1,    -1,
    -1,    -1,    22,    -1,    -1,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,    38,    39,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,
    50,    51,    -1,    -1,    54,    55,    56,    57,    -1,    -1,
    60,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,
    -1,    -1,    -1,    73,    74,    -1,    76,    77,    78,    -1,
    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,
    -1,    12,    -1,    93,    15,    16,    -1,    -1,    -1,    -1,
    -1,    22,    -1,    -1,    -1,    26,    27,    -1,    29,    -1,
    -1,    -1,    -1,   113,   114,    -1,    -1,    38,    39,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,    50,
    51,    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,
    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,    -1,
    -1,    -1,    73,    74,    -1,    76,    77,    78,    -1,    -1,
    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    12,    -1,    93,    15,    16,    -1,    -1,    -1,    -1,    -1,
    22,    -1,    -1,    -1,    26,    27,    -1,    29,    -1,    -1,
    -1,    -1,   113,   114,    -1,    -1,    38,    39,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,    50,    51,
    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,    -1,
    62,    63,    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,
    -1,    73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,
    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,
    -1,    93,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,
    -1,    -1,    -1,    26,    27,    -1,    29,    -1,    -1,    -1,
    -1,   113,   114,    -1,    -1,    38,    39,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    48,    -1,    50,    51,    -1,
    -1,    54,    55,    56,    57,    -1,    -1,    60,    -1,    62,
    63,    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
    73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,
    93,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,
    -1,    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,
   113,   114,    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    48,    -1,    50,    51,    -1,    -1,
    54,    55,    56,    57,    -1,    -1,    60,    -1,    62,    63,
    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,
    74,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,
    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,   113,
   114,    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
    55,    56,    57,    -1,    -1,    60,    -1,    62,    63,    64,
    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,    74,
    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,     5,
    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,    15,
    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,
    26,    27,    -1,    29,    -1,    -1,    -1,    -1,   113,   114,
    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
    56,    57,    -1,    -1,    60,    -1,    62,    63,    64,    -1,
    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,    74,    -1,
    76,    77,    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,
    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,    15,    16,
    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,
    27,    -1,    29,    -1,    -1,    -1,    -1,   113,   114,    -1,
    -1,    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,
    57,    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,
    -1,    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,
    77,    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,
    -1,    -1,    -1,    -1,    12,    -1,    93,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,
    -1,    -1,    -1,    12,    -1,    93,    15,    16,    -1,    -1,
    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,    -1,
    29,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,    38,
    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,
    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,    -1,
    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,
    69,    -1,    -1,    -1,    73,    74,    -1,    76,    77,    78,
    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,
    -1,    -1,    12,    -1,    93,    15,    16,    -1,    -1,    -1,
    -1,    -1,    22,    -1,    -1,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,    38,    39,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,
    50,    51,    -1,    -1,    54,    55,    56,    57,    -1,    -1,
    60,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,
    -1,    -1,    -1,    73,    74,    -1,    76,    77,    78,    -1,
    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,
    -1,    12,    -1,    93,    15,    16,    -1,    -1,    -1,    -1,
    -1,    22,    -1,    -1,    -1,    26,    27,    -1,    29,    -1,
    -1,    -1,    -1,   113,   114,    -1,    -1,    38,    39,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,    50,
    51,    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,
    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,    -1,
    -1,    -1,    73,    74,    -1,    76,    77,    78,    -1,    -1,
    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    12,    -1,    93,    15,    16,    -1,    -1,    -1,    -1,    -1,
    22,    -1,    -1,    -1,    26,    27,    -1,    29,    -1,    -1,
    -1,    -1,   113,   114,    -1,    -1,    38,    39,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    48,    -1,    50,    51,
    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,    -1,
    62,    63,    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,
    -1,    73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,
    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,
    -1,    93,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,
    -1,    -1,    -1,    26,    27,    -1,    29,    -1,    -1,    -1,
    -1,   113,   114,    -1,    -1,    38,    39,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    48,    -1,    50,    51,    -1,
    -1,    54,    55,    56,    57,    -1,    -1,    60,    -1,    62,
    63,    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
    73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,
    93,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,
    -1,    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,
   113,   114,    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    48,    -1,    50,    51,    -1,    -1,
    54,    55,    56,    57,    -1,    -1,    60,    -1,    62,    63,
    64,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,
    74,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
     5,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,
    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,   113,
   114,    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
    55,    56,    57,    -1,    -1,    60,    -1,    62,    63,    64,
    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,    74,
    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,     5,
    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,    15,
    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,
    26,    27,    -1,    29,    -1,    -1,    -1,    -1,   113,   114,
    -1,    -1,    38,    39,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
    56,    57,    -1,    -1,    60,    -1,    62,    63,    64,    -1,
    -1,    -1,    -1,    69,    -1,    -1,    -1,    73,    74,    -1,
    76,    77,    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,
    -1,    -1,    -1,    -1,    -1,    12,    -1,    93,    15,    16,
    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,
    27,    -1,    29,    -1,    -1,    -1,    -1,   113,   114,    -1,
    -1,    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,
    57,    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,
    -1,    -1,    69,    -1,    -1,    -1,    73,    -1,    -1,    76,
    77,    78,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,
    -1,    -1,    -1,    -1,    12,    -1,    93,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    27,
    -1,    29,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,
    38,    39,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
    -1,    -1,    60,    -1,    62,    63,    64,    -1,    -1,    -1,
    15,    69,    -1,    -1,    -1,    73,    -1,    22,    76,    77,
    78,    -1,    27,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    38,    39,    93,   106,   107,   108,   109,
   110,   111,   112,    -1,    -1,    50,    -1,    -1,    -1,    54,
    -1,    56,    -1,    -1,    -1,   113,   114,    62,    63,    64,
    -1,    -1,    -1,    15,    69,    -1,    -1,    -1,    73,    -1,
    22,    76,    77,    78,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    98,    99,   100,   101,    -1,    38,    39,    93,   106,
   107,   108,   109,   110,   111,   112,    15,    -1,    50,    -1,
    -1,    -1,    54,    22,    56,    -1,    -1,    -1,   113,   114,
    62,    63,    64,    -1,    -1,    -1,    -1,    69,    -1,    38,
    39,    73,    -1,    -1,    76,    77,    78,    -1,    -1,    15,
    -1,    50,    -1,    -1,    -1,    54,    22,    56,    -1,    -1,
    -1,    93,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,
    69,    -1,    38,    39,    73,    -1,    -1,    76,    77,    78,
    -1,   113,   114,    -1,    50,    -1,    -1,    -1,    54,    -1,
    56,    57,    -1,    -1,    93,    15,    62,    63,    64,    -1,
    -1,    -1,    22,    69,    -1,    -1,    -1,    27,    -1,    -1,
    76,    77,    78,    -1,   113,   114,    -1,    -1,    38,    39,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    15,    -1,
    50,    -1,    -1,    -1,    54,    22,    56,    -1,    -1,    -1,
    -1,    -1,    62,    63,    64,    -1,    -1,   113,   114,    69,
    -1,    38,    39,    -1,    -1,    -1,    76,    77,    78,    -1,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,    56,
    -1,    67,    68,    93,    -1,    62,    63,    64,    -1,    -1,
    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
    77,    78,    -1,   113,   114,    -1,    -1,    -1,    94,    95,
    96,    97,    98,    99,   100,   101,    93,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,    67,    68,    -1,
    96,    97,    98,    99,   100,   101,   113,   114,   104,    -1,
   106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    68,    -1,    -1,    94,    95,    96,    97,    98,    99,
   100,   101,    79,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    -1,    68,    -1,    -1,    94,    95,    96,
    97,    98,    99,   100,   101,    79,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,    -1,    68,    -1,    -1,
    94,    95,    96,    97,    98,    99,   100,   101,    79,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
    68,    -1,    -1,    94,    95,    96,    97,    98,    99,   100,
   101,    79,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,    68,    -1,    70,    -1,    94,    95,    96,    97,
    98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,    68,    -1,    -1,    94,    95,
    96,    97,    98,    99,   100,   101,    79,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,    -1,    68,    -1,
    -1,    94,    95,    96,    97,    98,    99,   100,   101,    79,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
    68,    -1,    70,    -1,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    68,    -1,    70,    94,    95,    96,    97,
    98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,    68,    -1,    70,    -1,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,    68,    -1,
    70,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
    -1,    68,    -1,    -1,    94,    95,    96,    97,    98,    99,
   100,   101,    79,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    -1,    68,    -1,    -1,    94,    95,    96,
    97,    98,    99,   100,   101,    79,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,    68,
    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
    70,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    68,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    68,    -1,    -1,    -1,    72,    -1,    -1,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,    94,    95,
    96,    97,    98,    99,   100,   101,    68,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
    94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
   
#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 139 "parse.y"
{dbgCoBlck("block: a + 0;");
    break;}
case 2:
#line 140 "parse.y"
{dbgCoBlck("block: ... a + 0;");
    break;}
case 3:
#line 142 "parse.y"
{dbgCoBlck("block: blck_function_expression");
    break;}
case 4:
#line 143 "parse.y"
{dbgCoBlck("block: ... blck_function_expression");
    break;}
case 5:
#line 145 "parse.y"
{dbgCoBlck("block: variable initialization;");
    break;}
case 6:
#line 146 "parse.y"
{dbgCoBlck("block: ... ; variable initialization;");
    break;}
case 7:
#line 148 "parse.y"
{dbgCoBlck("block: { block }");
    break;}
case 8:
#line 149 "parse.y"
{dbgCoBlck("block: ... { block }");
    break;}
case 9:
#line 151 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 10:
#line 152 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 11:
#line 154 "parse.y"
{dbgCoBlck("block: operators");
    break;}
case 12:
#line 155 "parse.y"
{dbgCoBlck("block: ... operators");
    break;}
case 13:
#line 157 "parse.y"
{dbgCoBlck("block: label");
    break;}
case 14:
#line 161 "parse.y"
{dbgCoOper("operators: if ()");
    break;}
case 15:
#line 163 "parse.y"
{dbgCoOper("operators: switch");
    break;}
case 16:
#line 165 "parse.y"
{dbgCoOper("operators: while");
    break;}
case 17:
#line 167 "parse.y"
{dbgCoOper("operators: for");
    break;}
case 18:
#line 169 "parse.y"
{dbgCoOper("operators: do ... while();");
    break;}
case 19:
#line 171 "parse.y"
{dbgCoOper("operators: try");;
    break;}
case 20:
#line 173 "parse.y"
{dbgCoOper("operators: throw");
    break;}
case 21:
#line 175 "parse.y"
{dbgCoOper("operators: return");
    break;}
case 22:
#line 177 "parse.y"
{dbgCoOper("operators: break");
    break;}
case 23:
#line 179 "parse.y"
{dbgCoOper("operators: continue");
    break;}
case 24:
#line 182 "parse.y"
{dbg("continue_operator: continue ;");
    break;}
case 25:
#line 183 "parse.y"
{dbg("continue_operator: continue a ;");
    break;}
case 26:
#line 186 "parse.y"
{dbg("break_operator: break ;");
    break;}
case 27:
#line 187 "parse.y"
{dbg("break_operator: break a ;");
    break;}
case 28:
#line 195 "parse.y"
{dbg("strange_expression: a : init_value");
    break;}
case 29:
#line 196 "parse.y"
{dbg("strange_expression: ... ; a : init_value");
    break;}
case 30:
#line 199 "parse.y"
{dbg("return_operator: return { strange_expression } ;");
    break;}
case 31:
#line 200 "parse.y"
{dbg("return_operator: return expression ;");
    break;}
case 32:
#line 204 "parse.y"
{dbg("throw_operator: throw expression ;");
    break;}
case 33:
#line 207 "parse.y"
{dbg("try_operator: try { block } catch_operator");
    break;}
case 34:
#line 208 "parse.y"
{dbg("try_operator: try { } catch_operator");
    break;}
case 35:
#line 209 "parse.y"
{dbg("try_operator: try { block } finally ...");
    break;}
case 36:
#line 212 "parse.y"
{dbg("finally_operator: finally { block }");
    break;}
case 37:
#line 213 "parse.y"
{dbg("finally_operator: finally { }");
    break;}
case 38:
#line 216 "parse.y"
{dbg("catch_operator: catch (a) { block }");
    break;}
case 39:
#line 217 "parse.y"
{dbg("catch_operator: catch (a) { }");
    break;}
case 40:
#line 218 "parse.y"
{dbg("catch_operator: catch { block }");
    break;}
case 41:
#line 219 "parse.y"
{dbg("catch_operator: catch { }");
    break;}
case 42:
#line 220 "parse.y"
{dbg("catch_operator: ... finally { block }");
    break;}
case 43:
#line 223 "parse.y"
{dbg("do_operator: do ... while(expression);");
    break;}
case 44:
#line 226 "parse.y"
{dbg("while_operator: while (expression) block");
    break;}
case 45:
#line 229 "parse.y"
{dbg("for_operator: for(i=0; i < 4; i++) block");
    break;}
case 46:
#line 230 "parse.y"
{dbg("for_operator: for(var i=0; i < 4; i++) block");
    break;}
case 47:
#line 231 "parse.y"
{dbg("for(var i in obj) block");
    break;}
case 48:
#line 232 "parse.y"
{dbg("for(i in obj) block");
    break;}
case 49:
#line 237 "parse.y"
{dbg("switch_operator: (expression) { case_expression default_operator }");
    break;}
case 50:
#line 238 "parse.y"
{dbg("switch_operator: (expression) { default_operator }");
    break;}
case 51:
#line 241 "parse.y"
{dbg("default_operator: default: block");
    break;}
case 52:
#line 242 "parse.y"
{dbg("default_operator: <nothing>");
    break;}
case 53:
#line 245 "parse.y"
{dbg("case_expression: case 1: block");
    break;}
case 54:
#line 246 "parse.y"
{dbg("case_expression: ... case 1: block");
    break;}
case 55:
#line 247 "parse.y"
{dbg("case_expression: case 1:");
    break;}
case 56:
#line 248 "parse.y"
{dbg("case_expression: ... case 1:");
    break;}
case 57:
#line 256 "parse.y"
{dbg("if_operator: if (expression) block");
    break;}
case 58:
#line 257 "parse.y"
{dbg("if_operator: if (expression) single_stat_blck else single_stat_blck");
    break;}
case 59:
#line 260 "parse.y"
{dbg("single_block: a + 0;");
    break;}
case 60:
#line 262 "parse.y"
{dbg("single_block: function_expression");
    break;}
case 61:
#line 264 "parse.y"
{dbg("single_block: variable initialization;");
    break;}
case 62:
#line 266 "parse.y"
{dbg("single_block: { block }");
    break;}
case 63:
#line 268 "parse.y"
{dbg("single_block: { }");
    break;}
case 64:
#line 270 "parse.y"
{dbg("single_block: label");
    break;}
case 65:
#line 272 "parse.y"
{dbg("single_block: operators");
    break;}
case 66:
#line 280 "parse.y"
{dbg("var_init: var a...; (local variable)");
    break;}
case 67:
#line 281 "parse.y"
{dbg("var_init: a...; (global variable)");
    break;}
case 69:
#line 285 "parse.y"
{dbg("var: ...a");
    break;}
case 70:
#line 286 "parse.y"
{dbg("var: a = 0;");
    break;}
case 71:
#line 287 "parse.y"
{dbg("var: a = 0, ...");
    break;}
case 72:
#line 290 "parse.y"
{dbg("init_block: a : init_value");
    break;}
case 73:
#line 291 "parse.y"
{dbg("init_block: 'vara' : init_value");
    break;}
case 74:
#line 292 "parse.y"
{dbg("init_block: ['vara' + a] : init_value");
    break;}
case 75:
#line 293 "parse.y"
{dbg("init_block: ... obj(clone object)");
    break;}
case 76:
#line 295 "parse.y"
{dbg("init_block: ... , a : init_value");
    break;}
case 77:
#line 296 "parse.y"
{dbg("init_block: ... , 'vara' : init_value");
    break;}
case 78:
#line 297 "parse.y"
{dbg("init_block: ... , ['vara' + a] : init_value");
    break;}
case 79:
#line 298 "parse.y"
{dbg("init_block: ... , ...obj(clone object)");
    break;}
case 81:
#line 302 "parse.y"
{dbg("init_value: expression");
    break;}
case 82:
#line 303 "parse.y"
{dbg("init_value: function_expression");
    break;}
case 83:
#line 304 "parse.y"
{dbg("init_value: { init_block }");
    break;}
case 84:
#line 311 "parse.y"
{dbg("function: function literal_string (parameters) { func_body }");
    break;}
case 85:
#line 314 "parse.y"
{dbg("function: function func_name (parameters) { func_body }");
    break;}
case 86:
#line 317 "parse.y"
{dbg("func_body: block");
    break;}
case 87:
#line 318 "parse.y"
{dbg("func_body: <nothing>");
    break;}
case 88:
#line 321 "parse.y"
{dbg("func_name: name");
    break;}
case 89:
#line 322 "parse.y"
{dbg("func_name: <nothing>");
    break;}
case 90:
#line 325 "parse.y"
{dbg("func_parameters: a");
    break;}
case 91:
#line 326 "parse.y"
{dbg("func_parameters: ... , a");
    break;}
case 92:
#line 327 "parse.y"
{dbg("func_parameters: <nothing>");
    break;}
case 93:
#line 339 "parse.y"
{dbgCoExpr("expression: (a+0)");
    break;}
case 94:
#line 341 "parse.y"
{dbgCoExpr("expression: assign_expression");
    break;}
case 95:
#line 342 "parse.y"
{dbgCoExpr("expression: shortened_expression");
    break;}
case 96:
#line 343 "parse.y"
{dbgCoExpr("expression: binary_expression");
    break;}
case 97:
#line 344 "parse.y"
{dbgCoExpr("expression: ternary_expression");
    break;}
case 98:
#line 345 "parse.y"
{dbgCoExpr("expression: unary_expression");
    break;}
case 99:
#line 346 "parse.y"
{dbgCoExpr("expression: new_expression");
    break;}
case 100:
#line 347 "parse.y"
{dbgCoExpr("expression: delete_expression");
    break;}
case 101:
#line 349 "parse.y"
{dbgCoExpr("expression: obj_and_method");
    break;}
case 102:
#line 351 "parse.y"
{dbgCoExpr("expression: literal_number");
    break;}
case 103:
#line 352 "parse.y"
{dbgCoExpr("expression: constant_string");
    break;}
case 104:
#line 355 "parse.y"
{dbgCoExpr("expression: empty_expression");
    break;}
case 105:
#line 357 "parse.y"
{dbgCoExpr("expression: useful_words");
    break;}
case 106:
#line 359 "parse.y"
{dbgCoExpr("expression: typeof_operator");
    break;}
case 107:
#line 361 "parse.y"
{dbgCoExpr("expression: this");
    break;}
case 108:
#line 367 "parse.y"
{dbg("typeof_operator: typeof expression");
    break;}
case 109:
#line 371 "parse.y"
{dbg("shortened_expression: a += a");
    break;}
case 110:
#line 372 "parse.y"
{dbg("shortened_expression: a -= a");
    break;}
case 111:
#line 373 "parse.y"
{dbg("shortened_expression: a *= a");
    break;}
case 112:
#line 374 "parse.y"
{dbg("shortened_expression: a **= a");
    break;}
case 113:
#line 375 "parse.y"
{dbg("shortened_expression: a /= a");
    break;}
case 114:
#line 376 "parse.y"
{dbg("shortened_expression: a %= a");
    break;}
case 115:
#line 377 "parse.y"
{dbg("shortened_expression: a >>= a, a >>>= a");
    break;}
case 116:
#line 378 "parse.y"
{dbg("shortened_expression: a <<= a, a <<<= a");
    break;}
case 117:
#line 379 "parse.y"
{dbg("shortened_expression: a &= a");
    break;}
case 118:
#line 380 "parse.y"
{dbg("shortened_expression: a ^= a");
    break;}
case 119:
#line 381 "parse.y"
{dbg("shortened_expression: a |= a");
    break;}
case 120:
#line 384 "parse.y"
{dbg("expression_enum: expression");
    break;}
case 121:
#line 385 "parse.y"
{dbg("expression_enum: ... , expression");
    break;}
case 122:
#line 387 "parse.y"
{dbg("expression_enum: function_expression");
    break;}
case 123:
#line 388 "parse.y"
{dbg("expression_enum: ... , function_expression");
    break;}
case 124:
#line 391 "parse.y"
{dbg("assign_expression: this.a = 0");
    break;}
case 125:
#line 392 "parse.y"
{dbg("assign_expression: this.a = function_expression");
    break;}
case 126:
#line 393 "parse.y"
{dbg("assign_expression: a = { init_block }");
    break;}
case 127:
#line 394 "parse.y"
{dbg("assign_expression: a = [ expression ]");
    break;}
case 128:
#line 397 "parse.y"
{dbg("new_expression: new a()");
    break;}
case 130:
#line 403 "parse.y"
{dbg("empty_expression: ;");
    break;}
case 131:
#line 406 "parse.y"
{dbg("useful_words: null");
    break;}
case 132:
#line 407 "parse.y"
{dbg("useful_words: true");
    break;}
case 133:
#line 408 "parse.y"
{dbg("useful_words: false");
    break;}
case 134:
#line 409 "parse.y"
{dbg("useful_words: undefined");
    break;}
case 135:
#line 410 "parse.y"
{dbg("useful_words: NaN");
    break;}
case 136:
#line 411 "parse.y"
{dbg("useful_words: Infinity");
    break;}
case 137:
#line 415 "parse.y"
{dbg("unary_expression: ++ a");
    break;}
case 138:
#line 416 "parse.y"
{dbg("unary_expression: ++ (a)");
    break;}
case 139:
#line 417 "parse.y"
{dbg("unary_expression: -- a");
    break;}
case 140:
#line 418 "parse.y"
{dbg("unary_expression: -- (a)");
    break;}
case 141:
#line 423 "parse.y"
{dbg("unary_expression: a ++");
    break;}
case 142:
#line 425 "parse.y"
{dbg("unary_expression: a --");
    break;}
case 143:
#line 427 "parse.y"
{dbg("unary_expression: !a");
    break;}
case 144:
#line 430 "parse.y"
{dbg("binary_expression: a * a");
    break;}
case 145:
#line 431 "parse.y"
{dbg("binary_expression: a / a");
    break;}
case 146:
#line 432 "parse.y"
{dbg("binary_expression: a % a");
    break;}
case 147:
#line 433 "parse.y"
{dbg("binary_expression: a - a");
    break;}
case 148:
#line 434 "parse.y"
{dbg("binary_expression: a + a");
    break;}
case 149:
#line 436 "parse.y"
{dbg("binary_expression: a && a");
    break;}
case 150:
#line 437 "parse.y"
{dbg("binary_expression: a || a");
    break;}
case 151:
#line 438 "parse.y"
{dbg("binary_expression: a == a, a === a");
    break;}
case 152:
#line 439 "parse.y"
{dbg("binary_expression: a != a, a !== a");
    break;}
case 153:
#line 440 "parse.y"
{dbg("binary_expression: a < a");
    break;}
case 154:
#line 441 "parse.y"
{dbg("binary_expression: a > a");
    break;}
case 155:
#line 442 "parse.y"
{dbg("binary_expression: a <= a");
    break;}
case 156:
#line 443 "parse.y"
{dbg("binary_expression: a >= a");
    break;}
case 157:
#line 445 "parse.y"
{dbg("binary_expression: a & a");
    break;}
case 158:
#line 446 "parse.y"
{dbg("binary_expression: a | a");
    break;}
case 159:
#line 447 "parse.y"
{dbg("binary_expression: a ^ a");
    break;}
case 160:
#line 448 "parse.y"
{dbg("binary_expression: a << a, a <<< a");
    break;}
case 161:
#line 449 "parse.y"
{dbg("binary_expression: a >> a, a >>> a");
    break;}
case 162:
#line 452 "parse.y"
{dbg("ternary_expression: (a > 0) ? 1 : 0");
    break;}
case 164:
#line 461 "parse.y"
{dbg("parameters: 1");
    break;}
case 165:
#line 462 "parse.y"
{dbg("parameters: function_expression");
    break;}
case 166:
#line 463 "parse.y"
{dbg("parameters: { init_block }");
    break;}
case 167:
#line 465 "parse.y"
{dbg("parameters: ... , 1");
    break;}
case 168:
#line 466 "parse.y"
{dbg("parameters: ... , function_expression");
    break;}
case 169:
#line 467 "parse.y"
{dbg("parameters: ... , { init_block }");
    break;}
case 170:
#line 470 "parse.y"
{dbg("object: ... ( parameters )");
    break;}
case 171:
#line 471 "parse.y"
{dbg("object: ... [ parameters ]");
    break;}
case 172:
#line 472 "parse.y"
{dbg("object: a");
    break;}
case 173:
#line 473 "parse.y"
{dbg("object: ... .a");
    break;}
case 174:
#line 474 "parse.y"
{dbg("object: this.a");
    break;}
case 175:
#line 483 "parse.y"
{dbg("Literal string")	;
    break;}
case 176:
#line 484 "parse.y"
{dbg("Constant string");;
    break;}
case 177:
#line 485 "parse.y"
{dbg("Literal number")	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 489 "parse.y"


void yyYaccInit() {}
void yyYaccCleanup() {}
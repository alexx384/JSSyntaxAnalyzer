
/*  A Bison parser, made from parse.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BREAK	258
#define	CASE	259
#define	CATCH	260
#define	CLASS	261
#define	CONST	262
#define	CONTINUE	263
#define	DEBUGGER	264
#define	DEFAULT	265
#define	DELETE	266
#define	DO	267
#define	ELSE	268
#define	ENUM	269
#define	EXPORT	270
#define	EXTENDS	271
#define	FALSE	272
#define	FINAL	273
#define	FINALLY	274
#define	FOR	275
#define	FUNCTION	276
#define	IF	277
#define	IMPLEMENTS	278
#define	IMPORT	279
#define	IN	280
#define	INSTANCEOF	281
#define	NEW	282
#define	NUL	283
#define	RETURN	284
#define	SUPER	285
#define	SWITCH	286
#define	THIS	287
#define	THROW	288
#define	TRUE	289
#define	TRY	290
#define	TYPEOF	291
#define	VAR	292
#define	VOID	293
#define	WHILE	294
#define	WITH	295
#define	UNDEFINED	296
#define	NAN	297
#define	INFINITY	298
#define	COMPONENTS_UTILS_IMPORT	299
#define	GET	300
#define	SET	301
#define	DOT	302
#define	COMA	303
#define	COLON	304
#define	QMARK	305
#define	LBRACKET_ROUND	306
#define	RBRACKET_ROUND	307
#define	LBRACKET_SQUARE	308
#define	RBRACKET_SQUARE	309
#define	LBRACKET_CURLY	310
#define	RBRACKET_CURLY	311
#define	INT_NUM	312
#define	LITERAL_NUMBER	313
#define	OBJ_NAME	314
#define	CSTRING	315
#define	END_OP	316
#define	ENDLINE	317
#define	OP_ASSIGN	318
#define	OP_ASSIGN_ADD	319
#define	OP_ASSIGN_SUB	320
#define	OP_ASSIGN_MUL	321
#define	OP_ASSIGN_POW	322
#define	OP_ASSIGN_DIV	323
#define	OP_ASSIGN_MOD	324
#define	OP_ASSIGN_LSHIFT	325
#define	OP_ASSIGN_RSHIFT	326
#define	OP_ASSIGN_AND	327
#define	OP_ASSIGN_XOR	328
#define	OP_ASSIGN_OR	329
#define	OPL_NOT	330
#define	OPL_AND	331
#define	OPL_OR	332
#define	OPL_EQ	333
#define	OPL_NEQ	334
#define	OPL_L	335
#define	OPL_G	336
#define	OPL_GE	337
#define	OPL_LE	338
#define	OPB_NOT	339
#define	OPB_OR	340
#define	OPB_AND	341
#define	OPB_XOR	342
#define	OPB_LSHIFT	343
#define	OPB_RSHIFT	344
#define	OPA_MUL	345
#define	OPA_DIV	346
#define	OPA_MOD	347
#define	OPA_ADD	348
#define	OPA_SUB	349
#define	OPA_INC	350
#define	OPA_DEC	351
#define	OPA_POW	352
#define	NO_ELSE	353

#line 91 "parse.y"
	
	#include <malloc.h>
	#include "KurCommon.h"
	
	#ifdef _DEBUG
	#define dbgCoBlck(str) SetTextColor(LIGHT_BLUE);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoExpr(str) SetTextColor(LIGHT_YELLOW);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbgCoOper(str) SetTextColor(LIGHT_GREEN);\
								 std::cout << str << std::endl;\
						   RevertColors();

	#define dbg(str) std::cout << str << std::endl;
	#else
	#define dbgCoBlck(str)
	#define dbgCoExpr(str)
	#define dbgCoOper(str)
	#define dbg(str)
	#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		458
#define	YYFLAG		-32768
#define	YYNTBASE	99

#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 154)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     9,    14,    17,    21,    23,    26,    28,
    31,    33,    37,    40,    42,    45,    47,    50,    52,    54,
    56,    58,    61,    65,    68,    73,    77,    80,    82,    84,
    86,    88,    90,    92,    94,    96,    98,   100,   104,   106,
   112,   115,   119,   122,   126,   130,   136,   137,   143,   146,
   149,   152,   158,   163,   169,   174,   178,   186,   193,   198,
   202,   208,   216,   222,   232,   242,   248,   255,   264,   272,
   276,   277,   282,   288,   292,   297,   303,   311,   314,   318,
   320,   324,   326,   330,   334,   338,   344,   349,   353,   359,
   365,   369,   373,   376,   382,   388,   396,   403,   409,   417,
   425,   431,   437,   442,   443,   445,   447,   451,   460,   463,
   476,   485,   487,   489,   490,   492,   493,   495,   499,   500,
   502,   504,   506,   508,   510,   512,   514,   516,   518,   520,
   522,   524,   526,   530,   532,   534,   538,   540,   542,   546,
   550,   554,   558,   562,   565,   569,   573,   577,   581,   585,
   589,   593,   597,   601,   605,   609,   613,   617,   623,   626,
   629,   630,   632,   634,   636,   638,   640,   642,   645,   650,
   653,   658,   661,   664,   667,   671,   675,   679,   683,   687,
   691,   695,   699,   703,   707,   711,   715,   719,   723,   727,
   731,   735,   739,   745,   747,   749,   753,   757,   761,   767,
   772,   775,   779,   783,   785,   787,   789,   793,   797,   802,
   804,   806,   808
};

static const short yyrhs[] = {   128,
     0,    99,   128,     0,    55,    99,    56,     0,    99,    55,
    99,    56,     0,    55,    56,     0,    99,    55,    56,     0,
   101,     0,    99,   101,     0,   104,     0,    99,   104,     0,
   130,     0,    55,    99,    56,     0,    55,    56,     0,   101,
     0,   134,    61,     0,   107,     0,   124,    61,     0,   105,
     0,   151,     0,    45,     0,    46,     0,   102,    49,     0,
   102,   151,    49,     0,   103,   128,     0,   103,    55,    99,
    56,     0,   103,    55,    56,     0,   103,   101,     0,   123,
     0,   120,     0,   118,     0,   119,     0,   117,     0,   114,
     0,   113,     0,   112,     0,   110,     0,   109,     0,    53,
   149,    54,     0,   108,     0,    44,    51,   149,    52,    61,
     0,     8,    61,     0,     8,   151,    61,     0,     3,    61,
     0,     3,   151,    61,     0,   151,    49,   127,     0,   111,
    61,   151,    49,   127,     0,     0,    29,    55,   111,    56,
    61,     0,    29,   130,     0,    29,   101,     0,    33,   100,
     0,    35,    55,    99,    56,   116,     0,    35,    55,    56,
   116,     0,    35,    55,    99,    56,   115,     0,    19,    55,
    99,    56,     0,    19,    55,    56,     0,     5,    51,   151,
    52,    55,    99,    56,     0,     5,    51,   151,    52,    55,
    56,     0,     5,    55,    99,    56,     0,     5,    55,    56,
     0,   116,    19,    55,    99,    56,     0,    12,   100,    39,
    51,   134,    52,    61,     0,    39,    51,   134,    52,   100,
     0,    20,    51,   134,    61,   134,    61,   134,    52,   100,
     0,    20,    51,   124,    61,   134,    61,   134,    52,   100,
     0,    20,    51,   134,    52,   100,     0,    20,    51,    37,
   134,    52,   100,     0,    31,    51,   134,    52,    55,   122,
   121,    56,     0,    31,    51,   134,    52,    55,   121,    56,
     0,    10,    49,    99,     0,     0,     4,   134,    49,    99,
     0,   122,     4,   134,    49,    99,     0,     4,   134,    49,
     0,   122,     4,   134,    49,     0,    22,    51,   134,    52,
   100,     0,    22,    51,   134,    52,   100,    13,   100,     0,
    37,   125,     0,   141,    48,   125,     0,   151,     0,   125,
    48,   151,     0,   141,     0,   125,    48,   141,     0,   151,
    49,   127,     0,   152,    49,   127,     0,    53,   134,    54,
    49,   127,     0,    47,    47,    47,   150,     0,     6,    49,
   127,     0,    45,   150,    55,    99,    56,     0,    46,   150,
    55,    99,    56,     0,    45,    49,   127,     0,    46,    49,
   127,     0,    37,   141,     0,   126,    48,   151,    49,   127,
     0,   126,    48,   152,    49,   127,     0,   126,    48,    53,
   134,    54,    49,   127,     0,   126,    48,    47,    47,    47,
   150,     0,   126,    48,     6,    49,   127,     0,   126,    48,
    45,   150,    55,    99,    56,     0,   126,    48,    46,   150,
    55,    99,    56,     0,   126,    48,    45,    49,   127,     0,
   126,    48,    46,    49,   127,     0,   126,    48,    37,   141,
     0,     0,   134,     0,   130,     0,    55,   126,    56,     0,
    21,   151,    51,   133,    52,    55,   131,    56,     0,   129,
    61,     0,    51,    21,   132,    51,   133,    52,    55,   131,
    56,    51,    52,    52,     0,    21,   132,    51,   133,    52,
    55,   131,    56,     0,   129,     0,    99,     0,     0,   151,
     0,     0,   151,     0,   133,    48,   151,     0,     0,   141,
     0,   140,     0,   147,     0,   148,     0,   146,     0,   142,
     0,   143,     0,   150,     0,   153,     0,   144,     0,   145,
     0,   139,     0,    32,     0,   150,    26,   150,     0,   138,
     0,   137,     0,   137,    47,   150,     0,   136,     0,   134,
     0,   135,    48,   134,     0,    53,   135,    54,     0,    51,
   134,    52,     0,    51,   130,    52,     0,   134,    25,   134,
     0,    36,   134,     0,   150,    64,   134,     0,   150,    65,
   134,     0,   150,    66,   134,     0,   150,    67,   134,     0,
   150,    68,   134,     0,   150,    69,   134,     0,   150,    70,
   134,     0,   150,    71,   134,     0,   150,    72,   134,     0,
   150,    73,   134,     0,   150,    74,   134,     0,   150,    63,
   134,     0,   150,    63,   130,     0,   150,    63,    55,   126,
    56,     0,    27,   134,     0,    11,   150,     0,     0,    28,
     0,    34,     0,    17,     0,    41,     0,    42,     0,    43,
     0,    95,   150,     0,    95,    51,   150,    52,     0,    96,
   150,     0,    96,    51,   150,    52,     0,   150,    95,     0,
   150,    96,     0,    75,   134,     0,   134,    90,   134,     0,
   134,    91,   134,     0,   134,    92,   134,     0,   134,    94,
   134,     0,   134,    93,   134,     0,   134,    76,   134,     0,
   134,    77,   134,     0,   134,    78,   134,     0,   134,    79,
   134,     0,   134,    80,   134,     0,   134,    81,   134,     0,
   134,    82,   134,     0,   134,    83,   134,     0,   134,    86,
   134,     0,   134,    85,   134,     0,   134,    87,   134,     0,
   134,    88,   134,     0,   134,    89,   134,     0,   134,    50,
   134,    49,   134,     0,   134,     0,   130,     0,    55,   126,
    56,     0,   149,    48,   134,     0,   149,    48,   130,     0,
   149,    48,    55,   126,    56,     0,   150,    51,   149,    52,
     0,   150,   106,     0,   150,    47,    45,     0,   150,    47,
    46,     0,    45,     0,    46,     0,   151,     0,   150,    47,
   151,     0,    32,    47,   151,     0,    32,    53,   149,    54,
     0,   152,     0,    59,     0,    60,     0,    58,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   148,   150,   151,   153,   154,   156,   157,   159,   160,
   162,   165,   166,   168,   170,   172,   173,   175,   178,   180,
   181,   183,   185,   187,   189,   190,   191,   194,   197,   199,
   201,   203,   205,   207,   209,   211,   213,   215,   220,   223,
   228,   230,   232,   234,   242,   244,   245,   247,   249,   250,
   254,   257,   259,   260,   262,   264,   266,   268,   269,   270,
   271,   273,   276,   279,   282,   283,   284,   290,   292,   294,
   296,   298,   300,   301,   302,   308,   310,   317,   319,   321,
   323,   324,   325,   327,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   357,   359,   360,   368,   370,   377,
   380,   382,   384,   386,   388,   390,   392,   394,   395,   401,
   410,   411,   412,   413,   414,   415,   417,   419,   422,   424,
   426,   428,   430,   432,   434,   435,   437,   439,   441,   443,
   446,   448,   450,   454,   457,   459,   460,   461,   462,   463,
   464,   465,   466,   467,   468,   480,   482,   483,   486,   489,
   492,   495,   497,   498,   499,   500,   501,   503,   506,   507,
   508,   513,   515,   517,   519,   521,   522,   523,   524,   526,
   527,   528,   529,   530,   531,   532,   533,   535,   536,   537,
   538,   539,   541,   546,   548,   549,   551,   552,   553,   555,
   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
   577,   578,   579
};

static const char * const yytname[] = {   "$","error","$undefined.","BREAK",
"CASE","CATCH","CLASS","CONST","CONTINUE","DEBUGGER","DEFAULT","DELETE","DO",
"ELSE","ENUM","EXPORT","EXTENDS","FALSE","FINAL","FINALLY","FOR","FUNCTION",
"IF","IMPLEMENTS","IMPORT","IN","INSTANCEOF","NEW","NUL","RETURN","SUPER","SWITCH",
"THIS","THROW","TRUE","TRY","TYPEOF","VAR","VOID","WHILE","WITH","UNDEFINED",
"NAN","INFINITY","COMPONENTS_UTILS_IMPORT","GET","SET","DOT","COMA","COLON",
"QMARK","LBRACKET_ROUND","RBRACKET_ROUND","LBRACKET_SQUARE","RBRACKET_SQUARE",
"LBRACKET_CURLY","RBRACKET_CURLY","INT_NUM","LITERAL_NUMBER","OBJ_NAME","CSTRING",
"END_OP","ENDLINE","OP_ASSIGN","OP_ASSIGN_ADD","OP_ASSIGN_SUB","OP_ASSIGN_MUL",
"OP_ASSIGN_POW","OP_ASSIGN_DIV","OP_ASSIGN_MOD","OP_ASSIGN_LSHIFT","OP_ASSIGN_RSHIFT",
"OP_ASSIGN_AND","OP_ASSIGN_XOR","OP_ASSIGN_OR","OPL_NOT","OPL_AND","OPL_OR",
"OPL_EQ","OPL_NEQ","OPL_L","OPL_G","OPL_GE","OPL_LE","OPB_NOT","OPB_OR","OPB_AND",
"OPB_XOR","OPB_LSHIFT","OPB_RSHIFT","OPA_MUL","OPA_DIV","OPA_MOD","OPA_ADD",
"OPA_SUB","OPA_INC","OPA_DEC","OPA_POW","NO_ELSE","block","single_block","universal_single_block",
"val_lbl","label","label_expression","operators","gen_list","reserved_expressions",
"components_utils_import_expression","continue_operator","break_operator","strange_expression",
"return_operator","throw_operator","try_operator","finally_operator","catch_operator",
"do_operator","while_operator","for_operator","switch_operator","default_operator",
"case_expression","if_operator","var_init","var","init_block","init_value","blck_function_expression",
"iif_expression","function_expression","func_body","func_name","func_parameters",
"expression","square_bracket_enum","square_bracket_expression","round_bracket_expression",
"in_expression","typeof_operator","shortened_expression","assign_expression",
"new_expression","delete_expression","empty_expression","useful_words","unary_expression",
"binary_expression","ternary_expression","parameters","object","literal_string",
"constant_string","literal_number",""
};
#endif

static const short yyr1[] = {     0,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   100,   100,   100,   100,   101,   101,   101,   101,   102,   102,
   102,   103,   103,   104,   104,   104,   104,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   106,   107,   108,
   109,   109,   110,   110,   111,   111,   111,   112,   112,   112,
   113,   114,   114,   114,   115,   115,   116,   116,   116,   116,
   116,   117,   118,   119,   119,   119,   119,   120,   120,   121,
   121,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   127,   127,   127,   128,   128,   129,
   130,   130,   131,   131,   132,   132,   133,   133,   133,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   135,   135,   136,
   137,   137,   138,   139,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   141,   141,   141,   142,   143,
   144,   145,   145,   145,   145,   145,   145,   146,   146,   146,
   146,   146,   146,   146,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   148,   149,   149,   149,   149,   149,   149,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   151,   152,   153
};

static const short yyr2[] = {     0,
     1,     2,     3,     4,     2,     3,     1,     2,     1,     2,
     1,     3,     2,     1,     2,     1,     2,     1,     1,     1,
     1,     2,     3,     2,     4,     3,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     5,
     2,     3,     2,     3,     3,     5,     0,     5,     2,     2,
     2,     5,     4,     5,     4,     3,     7,     6,     4,     3,
     5,     7,     5,     9,     9,     5,     6,     8,     7,     3,
     0,     4,     5,     3,     4,     5,     7,     2,     3,     1,
     3,     1,     3,     3,     3,     5,     4,     3,     5,     5,
     3,     3,     2,     5,     5,     7,     6,     5,     7,     7,
     5,     5,     4,     0,     1,     1,     3,     8,     2,    12,
     8,     1,     1,     0,     1,     0,     1,     3,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     3,     1,     1,     3,     3,
     3,     3,     3,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     2,     2,
     0,     1,     1,     1,     1,     1,     1,     2,     4,     2,
     4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     5,     1,     1,     3,     3,     3,     5,     4,
     2,     3,     3,     1,     1,     1,     3,     3,     4,     1,
     1,     1,     1
};

static const short yydefact[] = {   161,
     0,     0,     0,   161,   164,     0,     0,     0,   161,   162,
   161,     0,   132,   161,   163,     0,   161,     0,     0,   165,
   166,   167,     0,   204,   205,   161,   161,   161,   213,   211,
   212,   161,     0,     0,   161,     7,     0,   161,     9,    18,
    16,    39,    37,    36,    35,    34,    33,    32,    30,    31,
    29,    28,     0,     1,     0,     0,   137,   135,   134,   131,
   121,   120,   125,   126,   129,   130,   124,   122,   123,   127,
   206,   210,   128,    43,     0,    41,     0,     0,   204,   205,
   160,   206,   116,   161,     0,    14,   112,    11,   161,     0,
   161,   161,   159,   120,    47,    50,    49,   161,     0,   161,
    51,   161,   144,    78,    82,     0,   206,   161,   161,   116,
     0,     0,   138,     0,     5,   161,   174,     0,   168,     0,
   170,   161,     8,    10,     2,    22,     0,   161,    27,    24,
    17,   109,   161,   161,    15,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,     0,     0,     0,     0,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   172,   173,   201,    44,    42,     0,   115,    13,   161,
     0,   161,     0,     0,   119,     0,     0,     0,     0,   208,
   104,   195,   194,     0,     0,   161,     0,     0,     0,     0,
   142,   141,   161,   140,     3,     0,     0,     6,   161,    23,
    26,   161,   143,     0,   180,   181,   182,   183,   184,   185,
   186,   187,   189,   188,   190,   191,   192,   175,   176,   177,
   179,   178,   136,    79,   133,   202,   203,   207,     0,     0,
   104,   157,   156,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   119,    12,   161,     0,   120,   161,
   161,   161,     0,   117,   161,     0,     0,   161,     0,     0,
     0,     0,     0,     0,   161,     0,     0,     0,   161,   209,
     0,    53,     0,    83,   206,   161,     0,   119,   139,   169,
   171,     4,    25,   161,   200,    38,     0,     0,     0,   161,
     0,    66,     0,     0,     0,    76,    48,     0,   104,    45,
   106,   105,    71,   161,    93,   161,     0,   161,     0,     0,
     0,     0,   196,   161,   161,   104,   198,   197,     0,   161,
     0,     0,    54,    52,    63,    40,     0,   193,   158,     0,
     0,    67,   161,   161,   118,   161,   161,   161,     0,   161,
     0,     0,    71,    88,    91,   161,    92,   161,     0,     0,
     0,     0,     0,     0,     0,   161,     0,     0,    84,    85,
     0,     0,    60,   161,   161,   161,     0,   161,    62,     0,
     0,   161,     0,    77,    46,   107,     0,   161,    69,   161,
     0,   161,   161,    87,   161,   161,   103,   161,     0,   161,
     0,     0,     0,   161,   161,   199,     0,    59,   161,    56,
   161,   161,     0,   161,   161,   108,   161,   161,     0,    68,
    89,    90,    86,    98,   101,   161,   102,   161,     0,     0,
    94,    95,   161,    61,    55,     0,   111,    65,    64,   161,
   161,   161,   161,    97,   161,    58,   161,   111,   161,    99,
   100,    96,    57,     0,     0,   110,     0,     0
};

static const short yydefgoto[] = {   382,
    85,    36,    37,    38,    39,    40,   174,    41,    42,    43,
    44,   187,    45,    46,    47,   333,   282,    48,    49,    50,
    51,   352,   353,    52,    53,   104,   276,   310,    54,    55,
   311,   383,   177,   263,    56,   114,    57,    58,    59,    60,
    61,    94,    63,    64,    65,    66,    67,    68,    69,   194,
    70,    82,    72,    73
};

static const short yypact[] = {  3162,
   -29,     9,   201,  3232,-32768,    52,    45,    62,  3648,-32768,
  3302,    79,    67,  3232,-32768,    86,  3648,   201,    92,-32768,
-32768,-32768,   100,   -36,   -28,  1014,  3648,  1482,-32768,-32768,
-32768,  3648,    34,    73,  1132,-32768,   -10,  3372,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    91,-32768,   108,   671,-32768,   113,-32768,-32768,
-32768,   124,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   923,
    22,-32768,-32768,-32768,   120,-32768,   138,    67,-32768,-32768,
   103,-32768,    45,  1552,   122,-32768,-32768,-32768,    16,   133,
  3648,  3602,-32768,-32768,    45,-32768,-32768,  3648,    45,  3418,
-32768,  1622,-32768,   126,-32768,   -27,   -23,  3648,  3418,    45,
   164,  3689,  4270,   117,-32768,  1692,-32768,   201,   103,   201,
   103,  1762,-32768,-32768,-32768,-32768,   176,  1832,-32768,-32768,
-32768,-32768,  3648,  3648,-32768,  3648,  3648,  3648,  3648,  3648,
  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,
  3648,  3648,  3648,   201,   201,   201,     1,  3418,  3418,  3464,
  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,  3648,
  3648,-32768,-32768,-32768,-32768,-32768,   177,-32768,-32768,  1902,
   191,  3648,   165,  3670,    45,  3748,    -5,   203,  3767,-32768,
   141,-32768,  4270,   129,   257,  1972,   201,  3826,    25,   213,
-32768,-32768,  3648,-32768,-32768,   259,   267,-32768,  2042,-32768,
-32768,  2112,   207,  3845,  4346,  4329,   370,   370,   207,   207,
   207,   207,  4365,  4388,  3945,   247,   247,-32768,-32768,-32768,
   123,   123,   103,   126,   103,-32768,-32768,-32768,    90,   144,
   141,-32768,  4270,  4270,  4270,  4270,  4270,  4270,  4270,  4270,
  4270,  4270,  4270,  4270,    45,-32768,  3648,  3904,    -7,  3648,
  3232,  3648,   175,-32768,  3232,   204,    45,  3510,   216,   228,
   201,    99,   130,   234,  3648,    50,   236,   237,  3556,-32768,
    31,   272,    10,-32768,    17,  3232,   217,    45,  4270,-32768,
-32768,-32768,-32768,  3648,-32768,-32768,    53,   187,  3923,  3232,
  3982,-32768,  4005,    45,   238,   279,-32768,   253,   141,-32768,
-32768,  4270,   198,  3510,-32768,  3510,    74,  3510,   183,   256,
  4052,   158,-32768,  3510,  3510,   141,-32768,  4270,    45,  2182,
   250,   252,-32768,   272,-32768,-32768,   231,  4306,-32768,   258,
   255,-32768,  3648,  3648,-32768,  2252,  3232,  3510,    59,  3648,
   274,   265,   239,-32768,-32768,  3162,-32768,  3162,   201,   276,
   278,   201,   161,   199,   281,  3648,   284,   286,-32768,-32768,
    78,   291,-32768,  2322,  3162,  2392,   290,  2252,-32768,  4075,
  4097,  2462,   292,-32768,-32768,-32768,  4145,  3162,-32768,  3648,
   293,  2532,  2602,   103,  3510,  3510,-32768,  3510,   219,  3510,
   229,   303,  4190,  3510,  3510,-32768,   296,-32768,  2672,-32768,
  2742,  2252,   297,  3232,  3232,-32768,  1202,  2812,  4236,-32768,
-32768,-32768,-32768,-32768,-32768,  3162,-32768,  3162,   201,   305,
-32768,-32768,  2882,-32768,-32768,   301,-32768,-32768,-32768,  1272,
  1342,  2952,  3022,   103,  3510,-32768,  3092,   308,  1412,-32768,
-32768,-32768,-32768,   300,   309,-32768,   360,-32768
};

static const short yypgoto[] = {   240,
   -11,   218,-32768,-32768,   687,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    80,-32768,-32768,-32768,
-32768,    11,-32768,-32768,   277,   210,  -237,  -308,   524,   376,
     8,  -367,   260,  -246,   686,-32768,-32768,-32768,-32768,-32768,
-32768,   135,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -95,
   588,     0,  -186,-32768
};


#define	YYLAST		4482


static const short yytable[] = {    71,
    75,    77,   101,   297,   278,   354,    90,   355,   298,   357,
   413,    88,   -20,   199,   281,   369,   370,   107,    97,   157,
   -21,    88,   -20,   158,   -80,   159,     3,    71,   332,    30,
   -21,    74,     5,   111,    71,   160,   127,   -80,   126,   385,
   -82,   337,     9,    10,   436,   236,   237,    13,    30,    15,
   266,    17,   182,   -82,   278,   267,    20,    21,    22,    30,
    79,    80,   239,   240,   -81,    78,    92,    30,    27,    76,
   -19,   349,   279,    29,    30,    31,   287,   -81,    79,    80,
   -19,   329,   178,    71,   118,   330,   423,   424,   371,   425,
    32,   427,    30,    31,   188,   431,   432,   322,   190,   111,
   322,    71,    89,    30,    78,   323,   322,   192,   339,   178,
    33,    34,    91,    99,   386,    71,   192,    79,    80,   100,
   157,    71,   278,   120,   158,   322,   159,    71,   356,    98,
    78,    30,    31,   406,    62,   368,   452,   279,    62,   278,
   102,   295,   108,    79,    80,    62,   270,   316,    62,   157,
   109,   131,   105,   158,   107,   159,   238,    30,    31,   154,
   181,    78,    62,   361,   203,   192,   192,   242,   132,    62,
   204,   155,    62,   197,    79,    80,   279,   271,   318,    71,
   175,   107,   280,   185,   264,   272,   273,   274,    30,    31,
   277,   279,    78,   275,   362,    71,   285,   296,   176,    30,
    31,   350,   363,   364,   365,    79,    80,   351,    71,   398,
   366,    71,   149,   150,   151,   201,    30,    31,    62,    30,
    31,    86,   304,    62,   210,   260,   305,   255,    96,   157,
    78,    86,    78,   158,   304,   159,    62,   358,   340,    35,
   277,   257,   390,    79,    80,    79,    80,   400,   351,   302,
    62,   268,   123,   306,   264,   129,    62,    30,    31,    30,
    31,   281,    62,   288,   307,   157,   308,   116,    88,   158,
   313,   159,    88,   426,   335,   157,   314,   336,   304,   158,
   320,   159,   377,   428,   324,   325,   327,   264,   342,   105,
   331,   347,   346,    88,   147,   148,   149,   150,   151,   152,
   153,   348,   359,   345,   375,   157,   376,    88,   277,   158,
   290,   159,   378,   157,    62,   379,   259,   158,   291,   159,
   389,   367,   388,   180,   395,   277,   396,   402,   372,    71,
    62,   284,   404,   123,   405,   384,   149,   150,   151,   152,
   153,   196,   407,    62,   412,    71,    62,   416,   420,   429,
   433,   455,   437,   445,    88,    71,   448,    71,   454,   458,
   456,   209,   334,   391,   234,   183,     0,   212,     0,   200,
     0,     0,     0,    71,    71,    71,     0,    71,     0,    87,
     0,    71,     0,     0,     0,     0,    87,    71,     0,    87,
     0,    71,    71,     0,   133,    62,     0,   123,     0,    62,
     0,    87,   438,   439,     0,   315,     0,     0,    71,     0,
    71,    71,     0,   123,     0,     0,    71,    71,     0,     0,
    62,    88,    88,     0,     0,    71,   123,    71,     0,   123,
     0,     0,    71,     0,    62,     0,     0,     0,     0,    71,
    71,    71,    71,     0,     0,     0,    71,     0,    71,   140,
   141,   142,   143,     0,     0,     0,     0,   147,   148,   149,
   150,   151,   152,   153,    62,     0,     0,    87,     0,     0,
     0,     0,     0,     0,     0,    87,     0,     0,    86,     0,
    62,    62,    86,     0,    87,     0,     0,     0,     0,     0,
    62,     0,    62,     0,     0,     0,   397,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     0,    62,    62,
    62,     0,    62,     0,     0,     0,    62,    86,     0,     0,
     0,     0,    62,     0,     0,     0,    62,    62,     0,     0,
     0,     0,     0,    87,    87,    87,     0,     0,     0,     0,
     0,     0,     0,    62,     0,    62,    62,     0,    62,    62,
     0,    62,    62,     0,     0,     0,     0,     0,   125,     0,
    62,   130,    62,     0,    86,     0,     0,    62,     0,   374,
     0,     0,     0,     0,    62,    62,    62,    62,     0,     0,
     0,    62,     0,    62,     0,     0,     0,     0,     0,     0,
    81,   123,     0,     0,     0,   392,     0,   393,     0,   123,
     0,     0,     0,     0,     0,   106,     0,     0,     0,   123,
   123,     0,     0,     0,   409,   411,     0,     0,     0,     0,
   119,   121,     0,     0,     0,     0,   123,   418,   123,     0,
     0,    86,    86,     0,     0,   123,    87,     0,     0,   125,
    87,     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,     0,   440,   123,     0,   123,
   123,    87,     0,     0,   123,   442,   123,   443,     0,     0,
     0,     0,   447,     0,     0,    87,     0,     0,     0,     0,
   449,     0,     0,     0,     0,     0,     0,     0,     0,    87,
     0,    87,     0,    87,    93,   133,     0,     0,     0,    87,
    87,     0,   103,   125,     0,   206,     0,   207,     0,     0,
     0,   112,   113,     0,     0,     0,     0,   117,     0,   125,
   134,   124,    87,    87,     0,     0,     0,     0,     0,     0,
     0,   135,   125,     0,     0,   125,     0,     0,     0,     0,
     0,   233,   106,   235,     0,     0,   136,   137,   138,   139,
   140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,     0,     0,     0,     0,     0,
    87,    87,     0,    87,   184,    87,   186,   112,     0,    87,
    87,     0,     0,   189,   106,   193,     0,     0,     0,    87,
    87,     0,     0,   198,   193,     0,     0,     0,     0,     0,
     0,     0,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   213,   214,
    87,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     0,     0,     0,   193,   193,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,     0,   106,   317,
   319,     0,     0,     0,     0,     0,   124,   258,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   124,     0,     0,     0,     0,     0,   289,     0,
     0,     0,     0,     0,     0,   124,     0,   125,   124,     0,
     0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,   125,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,     0,   125,     0,     0,     0,     0,     0,
     0,   125,   299,     0,     0,   301,   394,   303,   156,   106,
   399,   401,     0,   312,     0,     0,     0,     0,     0,     0,
   321,     0,     0,   125,   328,   125,   125,     0,     0,   157,
   125,     0,   125,   158,     0,   159,     0,     0,     0,   338,
     0,     0,     0,     0,     0,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,     0,     0,   312,
     0,   312,     0,   312,     0,     0,     0,     0,     0,   312,
   312,     0,     0,     0,     0,     0,   444,   172,   173,     0,
     0,     0,     0,     0,     3,     0,     0,     0,   380,   381,
     5,     0,     0,   312,   110,   387,     0,     0,     0,     0,
     9,    10,     0,     0,     0,    13,     0,    15,     0,    17,
     0,   403,     0,     0,    20,    21,    22,     0,    79,    80,
   124,     0,     0,     0,    26,     0,    27,     0,   124,     0,
     0,    29,    30,    31,     0,   419,     0,     0,   124,   124,
   312,   312,     0,   312,     0,   312,     0,     0,    32,   312,
   312,     0,     0,     0,     0,   124,     0,   124,     0,     0,
     0,     0,     0,     0,   124,     0,     0,     0,    33,    34,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   124,     0,   124,   124,
   312,   457,     0,   124,     1,   124,     0,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,     0,     0,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,     0,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,   -74,    32,     0,     0,     2,
     0,   -74,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   -74,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,   -72,    32,     0,     0,     2,
     0,   -72,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   -72,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,   -75,    32,     0,     0,     2,
     0,   -75,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   -75,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,   -73,    32,     0,     0,     2,
     0,   -73,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   -73,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   115,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   179,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   195,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   205,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   208,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   211,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   256,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   283,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   292,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   293,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   373,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,  -114,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   408,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   410,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,  -113,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   421,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   422,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   434,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   435,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   -70,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,   446,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   450,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   451,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,   122,   453,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    24,    25,     0,     0,
     0,     0,    26,     0,    27,     0,    28,     0,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,    83,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    79,    80,     0,     0,
     0,     0,    26,     0,    27,     0,    84,     0,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,    83,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    79,    80,     0,     0,
     0,     0,    26,     0,    27,     0,    95,     0,     0,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     1,     0,    32,     0,     0,     2,
     0,     0,     3,     4,     0,     0,     0,     0,     5,     0,
     0,     6,     7,     8,     0,     0,    33,    34,     9,    10,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
    19,     0,    20,    21,    22,    23,    79,    80,     0,     0,
     0,     0,    26,     0,    27,     0,   128,     0,     3,    29,
    30,    31,     0,     0,     5,     0,     0,     0,    83,     0,
     0,     0,     0,     0,     9,    10,    32,     0,     0,    13,
     0,    15,     0,    17,     0,     0,     0,     0,    20,    21,
    22,     0,    79,    80,     0,     0,    33,    34,    26,     0,
    27,     0,   191,     0,     3,    29,    30,    31,     0,     0,
     5,     0,     0,     0,    83,     0,     0,     0,     0,     0,
     9,    10,    32,     0,     0,    13,     0,    15,     0,    17,
     0,     0,     0,     0,    20,    21,    22,     0,    79,    80,
     0,     0,    33,    34,    26,     0,    27,     0,   241,     0,
     3,    29,    30,    31,     0,     0,     5,     0,     0,     0,
    83,     0,     0,     0,     0,     0,     9,    10,    32,     0,
     0,    13,     0,    15,     0,    17,     0,     0,     0,     0,
    20,    21,    22,     0,    79,    80,     0,     0,    33,    34,
    26,     0,    27,     0,   309,     0,     3,    29,    30,    31,
     0,     0,     5,     0,     0,     0,    83,     0,     0,     0,
     0,     0,     9,    10,    32,     0,     0,    13,     0,    15,
     0,    17,     0,     0,     0,     0,    20,    21,    22,     0,
    79,    80,     0,     0,    33,    34,    26,     0,    27,     0,
   326,     0,     3,    29,    30,    31,     0,     0,     5,     0,
     0,     0,    83,     0,     0,     0,     0,     0,     9,    10,
    32,     0,     0,    13,     0,    15,     0,    17,     0,     0,
     0,     0,    20,    21,    22,     0,    79,    80,     0,     0,
    33,    34,    26,     0,    27,     0,     0,     0,     3,    29,
    30,    31,     0,     0,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     9,    10,    32,     0,     0,    13,
     0,    15,     0,    17,     0,     0,     0,     0,    20,    21,
    22,     0,    79,    80,   133,     0,    33,    34,    92,     0,
    27,     0,     0,     0,     0,    29,    30,    31,     0,     0,
     0,     0,     0,   133,     0,     0,     0,     0,     0,   134,
     0,   261,    32,     0,     0,     0,     0,     0,     0,     0,
   262,     0,     0,     0,     0,     0,     0,     0,   134,     0,
   202,     0,    33,    34,     0,   136,   137,   138,   139,   140,
   141,   142,   143,     0,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   136,   137,   138,   139,   140,   141,
   142,   143,   133,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
     0,   133,     0,     0,     0,     0,     0,   134,     0,   265,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   134,     0,   269,     0,
     0,     0,     0,   136,   137,   138,   139,   140,   141,   142,
   143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   136,   137,   138,   139,   140,   141,   142,   143,
   133,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,     0,     0,     0,     0,     0,     0,     0,     0,   133,
     0,     0,     0,     0,     0,   134,     0,   286,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   294,   134,     0,     0,     0,     0,     0,
     0,   136,   137,   138,   139,   140,   141,   142,   143,     0,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   136,   137,   138,   139,   140,   141,   142,   143,   133,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,     0,
     0,     0,     0,     0,     0,     0,     0,   133,     0,     0,
     0,     0,     0,   134,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   133,
     0,     0,   134,     0,   341,     0,     0,     0,     0,   136,
   137,   138,   139,   140,   141,   142,   143,     0,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   136,   137,
   138,   139,   140,   141,   142,   143,   133,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,     0,     0,     0,
     0,     0,   138,   139,   140,   141,   142,   143,     0,   133,
   145,   134,   147,   148,   149,   150,   151,   152,   153,     0,
     0,     0,   343,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   134,     0,     0,   136,   137,   138,
   139,   140,   141,   142,   143,   344,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   133,     0,     0,     0,
   136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   133,
     0,   134,     0,     0,     0,   360,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   133,     0,     0,   134,     0,   414,   136,   137,   138,
   139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   134,     0,   415,     0,
   136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   133,
     0,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     0,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,     0,     0,   417,   134,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
   136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   134,
     0,     0,     0,   430,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   133,     0,     0,     0,     0,   136,   137,   138,   139,   140,
   141,   142,   143,     0,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   441,   134,     0,     0,     0,     0,
     0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,   137,   138,   139,   140,   141,   142,   143,   134,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   136,   137,   138,   139,   140,
   141,   142,   143,   133,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
   133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,   137,   138,   139,   140,   141,   142,   143,   133,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     0,     0,     0,     0,   136,     0,   138,   139,   140,   141,
   142,   143,   133,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   138,   139,   140,   141,   142,   143,     0,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     0,     0,   138,   139,   140,   141,   142,   143,     0,     0,
   145,   146,   147,   148,   149,   150,   151,   152,   153,     0,
     0,     0,     0,     0,     0,   138,   139,   140,   141,   142,
   143,     0,     0,     0,     0,   147,   148,   149,   150,   151,
   152,   153
};

static const short yycheck[] = {     0,
     1,     2,    14,   241,   191,   314,     7,   316,   255,   318,
   378,     4,    49,   109,     5,   324,   325,    18,    11,    47,
    49,    14,    59,    51,    48,    53,    11,    28,    19,    59,
    59,    61,    17,    26,    35,    63,    37,    61,    49,   348,
    48,   288,    27,    28,   412,    45,    46,    32,    59,    34,
    56,    36,    37,    61,   241,    61,    41,    42,    43,    59,
    45,    46,   158,   159,    48,    32,    51,    59,    53,    61,
    49,   309,    48,    58,    59,    60,    52,    61,    45,    46,
    59,    51,    83,    84,    51,    55,   395,   396,   326,   398,
    75,   400,    59,    60,    95,   404,   405,    48,    99,    92,
    48,   102,    51,    59,    32,    56,    48,   100,    56,   110,
    95,    96,    51,    47,    56,   116,   109,    45,    46,    53,
    47,   122,   309,    51,    51,    48,    53,   128,    55,    51,
    32,    59,    60,    56,     0,   322,   445,    48,     4,   326,
    55,    52,    51,    45,    46,    11,     6,    49,    14,    47,
    51,    61,    18,    51,   155,    53,   157,    59,    60,    47,
    39,    32,    28,     6,    48,   158,   159,   160,    61,    35,
    54,    48,    38,    48,    45,    46,    48,    37,    49,   180,
    61,   182,    54,    51,   185,    45,    46,    47,    59,    60,
   191,    48,    32,    53,    37,   196,   197,    54,    61,    59,
    60,     4,    45,    46,    47,    45,    46,    10,   209,    49,
    53,   212,    90,    91,    92,    52,    59,    60,    84,    59,
    60,     4,    48,    89,    49,    61,    52,    51,    11,    47,
    32,    14,    32,    51,    48,    53,   102,    55,    52,     0,
   241,    51,     4,    45,    46,    45,    46,    49,    10,   261,
   116,    49,    35,   265,   255,    38,   122,    59,    60,    59,
    60,     5,   128,    51,    61,    47,   267,    28,   261,    51,
    55,    53,   265,    55,   286,    47,    49,    61,    48,    51,
    47,    53,    52,    55,    49,    49,   279,   288,   300,   155,
    19,    13,    55,   286,    88,    89,    90,    91,    92,    93,
    94,    49,    47,   304,    55,    47,    55,   300,   309,    51,
    52,    53,    55,    47,   180,    61,   182,    51,    52,    53,
    56,   322,    49,    84,    49,   326,    49,    47,   329,   330,
   196,   197,    49,   116,    49,   347,    90,    91,    92,    93,
    94,   102,    52,   209,    55,   346,   212,    56,    56,    47,
    55,    52,    56,    49,   347,   356,    56,   358,    51,     0,
    52,   122,   283,   353,   155,    89,    -1,   128,    -1,   110,
    -1,    -1,    -1,   374,   375,   376,    -1,   378,    -1,     4,
    -1,   382,    -1,    -1,    -1,    -1,    11,   388,    -1,    14,
    -1,   392,   393,    -1,    25,   261,    -1,   180,    -1,   265,
    -1,    26,   414,   415,    -1,   271,    -1,    -1,   409,    -1,
   411,   412,    -1,   196,    -1,    -1,   417,   418,    -1,    -1,
   286,   414,   415,    -1,    -1,   426,   209,   428,    -1,   212,
    -1,    -1,   433,    -1,   300,    -1,    -1,    -1,    -1,   440,
   441,   442,   443,    -1,    -1,    -1,   447,    -1,   449,    80,
    81,    82,    83,    -1,    -1,    -1,    -1,    88,    89,    90,
    91,    92,    93,    94,   330,    -1,    -1,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,   261,    -1,
   346,   347,   265,    -1,   109,    -1,    -1,    -1,    -1,    -1,
   356,    -1,   358,    -1,    -1,    -1,   362,    -1,    -1,    -1,
    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,   374,   375,
   376,    -1,   378,    -1,    -1,    -1,   382,   300,    -1,    -1,
    -1,    -1,   388,    -1,    -1,    -1,   392,   393,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   409,    -1,   411,   412,    -1,   414,   415,
    -1,   417,   418,    -1,    -1,    -1,    -1,    -1,    35,    -1,
   426,    38,   428,    -1,   347,    -1,    -1,   433,    -1,   330,
    -1,    -1,    -1,    -1,   440,   441,   442,   443,    -1,    -1,
    -1,   447,    -1,   449,    -1,    -1,    -1,    -1,    -1,    -1,
     3,   374,    -1,    -1,    -1,   356,    -1,   358,    -1,   382,
    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,   392,
   393,    -1,    -1,    -1,   375,   376,    -1,    -1,    -1,    -1,
    33,    34,    -1,    -1,    -1,    -1,   409,   388,   411,    -1,
    -1,   414,   415,    -1,    -1,   418,   261,    -1,    -1,   116,
   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   279,    -1,   417,   440,    -1,   442,
   443,   286,    -1,    -1,   447,   426,   449,   428,    -1,    -1,
    -1,    -1,   433,    -1,    -1,   300,    -1,    -1,    -1,    -1,
   441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,
    -1,   316,    -1,   318,     9,    25,    -1,    -1,    -1,   324,
   325,    -1,    17,   180,    -1,   118,    -1,   120,    -1,    -1,
    -1,    26,    27,    -1,    -1,    -1,    -1,    32,    -1,   196,
    50,    35,   347,   348,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    61,   209,    -1,    -1,   212,    -1,    -1,    -1,    -1,
    -1,   154,   155,   156,    -1,    -1,    76,    77,    78,    79,
    80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   395,   396,    -1,   398,    89,   400,    91,    92,    -1,   404,
   405,    -1,    -1,    98,   197,   100,    -1,    -1,    -1,   414,
   415,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
   445,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,    -1,   271,   272,
   273,    -1,    -1,    -1,    -1,    -1,   180,   182,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,   203,    -1,
    -1,    -1,    -1,    -1,    -1,   209,    -1,   374,   212,    -1,
    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   392,   393,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   409,    -1,   411,    -1,    -1,    -1,    -1,    -1,
    -1,   418,   257,    -1,    -1,   260,   359,   262,    26,   362,
   363,   364,    -1,   268,    -1,    -1,    -1,    -1,    -1,    -1,
   275,    -1,    -1,   440,   279,   442,   443,    -1,    -1,    47,
   447,    -1,   449,    51,    -1,    53,    -1,    -1,    -1,   294,
    -1,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    -1,    -1,   314,
    -1,   316,    -1,   318,    -1,    -1,    -1,    -1,    -1,   324,
   325,    -1,    -1,    -1,    -1,    -1,   429,    95,    96,    -1,
    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,   343,   344,
    17,    -1,    -1,   348,    21,   350,    -1,    -1,    -1,    -1,
    27,    28,    -1,    -1,    -1,    32,    -1,    34,    -1,    36,
    -1,   366,    -1,    -1,    41,    42,    43,    -1,    45,    46,
   374,    -1,    -1,    -1,    51,    -1,    53,    -1,   382,    -1,
    -1,    58,    59,    60,    -1,   390,    -1,    -1,   392,   393,
   395,   396,    -1,   398,    -1,   400,    -1,    -1,    75,   404,
   405,    -1,    -1,    -1,    -1,   409,    -1,   411,    -1,    -1,
    -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,    95,    96,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,   442,   443,
   445,     0,    -1,   447,     3,   449,    -1,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    75,    -1,    -1,     8,
    -1,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    75,    -1,    -1,     8,
    -1,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    75,    -1,    -1,     8,
    -1,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    75,    -1,    -1,     8,
    -1,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    56,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    -1,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    75,    -1,    -1,     8,
    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    20,    21,    22,    -1,    -1,    95,    96,    27,    28,
    29,    -1,    31,    32,    33,    34,    35,    36,    37,    -1,
    39,    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,
    -1,    -1,    51,    -1,    53,    -1,    55,    -1,    11,    58,
    59,    60,    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    27,    28,    75,    -1,    -1,    32,
    -1,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
    43,    -1,    45,    46,    -1,    -1,    95,    96,    51,    -1,
    53,    -1,    55,    -1,    11,    58,    59,    60,    -1,    -1,
    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    28,    75,    -1,    -1,    32,    -1,    34,    -1,    36,
    -1,    -1,    -1,    -1,    41,    42,    43,    -1,    45,    46,
    -1,    -1,    95,    96,    51,    -1,    53,    -1,    55,    -1,
    11,    58,    59,    60,    -1,    -1,    17,    -1,    -1,    -1,
    21,    -1,    -1,    -1,    -1,    -1,    27,    28,    75,    -1,
    -1,    32,    -1,    34,    -1,    36,    -1,    -1,    -1,    -1,
    41,    42,    43,    -1,    45,    46,    -1,    -1,    95,    96,
    51,    -1,    53,    -1,    55,    -1,    11,    58,    59,    60,
    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,
    -1,    -1,    27,    28,    75,    -1,    -1,    32,    -1,    34,
    -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,    -1,
    45,    46,    -1,    -1,    95,    96,    51,    -1,    53,    -1,
    55,    -1,    11,    58,    59,    60,    -1,    -1,    17,    -1,
    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,    28,
    75,    -1,    -1,    32,    -1,    34,    -1,    36,    -1,    -1,
    -1,    -1,    41,    42,    43,    -1,    45,    46,    -1,    -1,
    95,    96,    51,    -1,    53,    -1,    -1,    -1,    11,    58,
    59,    60,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    27,    28,    75,    -1,    -1,    32,
    -1,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
    43,    -1,    45,    46,    25,    -1,    95,    96,    51,    -1,
    53,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    50,
    -1,    52,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    52,    -1,    95,    96,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    76,    77,    78,    79,    80,    81,
    82,    83,    25,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    25,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    82,
    83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    76,    77,    78,    79,    80,    81,    82,    83,
    25,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    76,    77,    78,    79,    80,    81,    82,    83,    25,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,
    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,    76,
    77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    76,    77,
    78,    79,    80,    81,    82,    83,    25,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    25,
    86,    50,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    76,    77,    78,
    79,    80,    81,    82,    83,    61,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    25,    -1,    -1,    -1,
    76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    25,
    -1,    50,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    25,    -1,    -1,    50,    -1,    52,    76,    77,    78,
    79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    50,    -1,    52,    -1,
    76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    25,
    -1,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
    -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    50,
    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    49,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    76,    77,    78,    79,    80,    81,    82,    83,    50,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    80,
    81,    82,    83,    25,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    76,    77,    78,    79,    80,    81,    82,    83,    25,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    -1,    -1,    -1,    -1,    76,    -1,    78,    79,    80,    81,
    82,    83,    25,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    78,    79,    80,    81,    82,    83,    -1,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
    83,    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,
    93,    94
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
   
#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "parse.y"
{dbgCoBlck("block: blck_function_expression");
    break;}
case 2:
#line 148 "parse.y"
{dbgCoBlck("block: ... blck_function_expression");
    break;}
case 3:
#line 150 "parse.y"
{dbgCoBlck("block: { block }");
    break;}
case 4:
#line 151 "parse.y"
{dbgCoBlck("block: ... { block }");
    break;}
case 5:
#line 153 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 6:
#line 154 "parse.y"
{dbgCoBlck("block: { }");
    break;}
case 7:
#line 156 "parse.y"
{dbgCoBlck("block: universal_single_block");
    break;}
case 8:
#line 157 "parse.y"
{dbgCoBlck("block: ... universal_single_block");
    break;}
case 11:
#line 163 "parse.y"
{dbg("single_block: function_expression");
    break;}
case 12:
#line 165 "parse.y"
{dbg("single_block: { block }");
    break;}
case 13:
#line 166 "parse.y"
{dbg("single_block: { }");
    break;}
case 14:
#line 168 "parse.y"
{dbg("single_block: universal_single_block");
    break;}
case 15:
#line 171 "parse.y"
{dbg("universal_single_block: a + 0;");
    break;}
case 16:
#line 172 "parse.y"
{dbg("universal_single_block: reserved_expressions");
    break;}
case 17:
#line 173 "parse.y"
{dbg("universal_single_block: variable initialization;");
    break;}
case 18:
#line 175 "parse.y"
{dbg("universal_single_block: operators");
    break;}
case 22:
#line 184 "parse.y"
{dbg("label: lbl1 :");
    break;}
case 23:
#line 185 "parse.y"
{dbg("label: ... lbl1 :");
    break;}
case 24:
#line 188 "parse.y"
{dbg("label_expression: label : blck_function_expression");
    break;}
case 25:
#line 189 "parse.y"
{dbg("label_expression: label : { block }");
    break;}
case 26:
#line 190 "parse.y"
{dbg("label_expression: label : { }");
    break;}
case 27:
#line 191 "parse.y"
{dbg("label_expression: label : universal_single_block");
    break;}
case 28:
#line 195 "parse.y"
{dbgCoOper("operators: if ()");
    break;}
case 29:
#line 197 "parse.y"
{dbgCoOper("operators: switch");
    break;}
case 30:
#line 199 "parse.y"
{dbgCoOper("operators: while");
    break;}
case 31:
#line 201 "parse.y"
{dbgCoOper("operators: for");
    break;}
case 32:
#line 203 "parse.y"
{dbgCoOper("operators: do ... while();");
    break;}
case 33:
#line 205 "parse.y"
{dbgCoOper("operators: try");;
    break;}
case 34:
#line 207 "parse.y"
{dbgCoOper("operators: throw");
    break;}
case 35:
#line 209 "parse.y"
{dbgCoOper("operators: return");
    break;}
case 36:
#line 211 "parse.y"
{dbgCoOper("operators: break");
    break;}
case 37:
#line 213 "parse.y"
{dbgCoOper("operators: continue");
    break;}
case 41:
#line 229 "parse.y"
{dbg("continue_operator: continue ;");
    break;}
case 42:
#line 230 "parse.y"
{dbg("continue_operator: continue a ;");
    break;}
case 43:
#line 233 "parse.y"
{dbg("break_operator: break ;");
    break;}
case 44:
#line 234 "parse.y"
{dbg("break_operator: break a ;");
    break;}
case 45:
#line 243 "parse.y"
{dbg("strange_expression: a : init_value");
    break;}
case 46:
#line 244 "parse.y"
{dbg("strange_expression: ... ; a : init_value");
    break;}
case 48:
#line 248 "parse.y"
{dbg("return_operator: return { strange_expression } ;");
    break;}
case 49:
#line 249 "parse.y"
{dbg("single_block: function_expression");
    break;}
case 50:
#line 250 "parse.y"
{dbg("single_block: universal_single_block");
    break;}
case 51:
#line 255 "parse.y"
{dbg("throw_operator: throw single_block");
    break;}
case 52:
#line 258 "parse.y"
{dbg("try_operator: try { block } catch_operator");
    break;}
case 53:
#line 259 "parse.y"
{dbg("try_operator: try { } catch_operator");
    break;}
case 54:
#line 260 "parse.y"
{dbg("try_operator: try { block } finally ...");
    break;}
case 55:
#line 263 "parse.y"
{dbg("finally_operator: finally { block }");
    break;}
case 56:
#line 264 "parse.y"
{dbg("finally_operator: finally { }");
    break;}
case 57:
#line 267 "parse.y"
{dbg("catch_operator: catch (a) { block }");
    break;}
case 58:
#line 268 "parse.y"
{dbg("catch_operator: catch (a) { }");
    break;}
case 59:
#line 269 "parse.y"
{dbg("catch_operator: catch { block }");
    break;}
case 60:
#line 270 "parse.y"
{dbg("catch_operator: catch { }");
    break;}
case 61:
#line 271 "parse.y"
{dbg("catch_operator: ... finally { block }");
    break;}
case 62:
#line 274 "parse.y"
{dbg("do_operator: do ... while(expression);");
    break;}
case 63:
#line 277 "parse.y"
{dbg("while_operator: while (expression) block");
    break;}
case 64:
#line 281 "parse.y"
{dbg("for_operator: for(i=0; i < 4; i++) block");
    break;}
case 65:
#line 282 "parse.y"
{dbg("for_operator: for(var i=0; i < 4; i++) block");
    break;}
case 68:
#line 291 "parse.y"
{dbg("switch_operator: (expression) { case_expression default_operator }");
    break;}
case 69:
#line 292 "parse.y"
{dbg("switch_operator: (expression) { default_operator }");
    break;}
case 70:
#line 295 "parse.y"
{dbg("default_operator: default: block");
    break;}
case 71:
#line 296 "parse.y"
{dbg("default_operator: <nothing>");
    break;}
case 72:
#line 299 "parse.y"
{dbg("case_expression: case 1: block");
    break;}
case 73:
#line 300 "parse.y"
{dbg("case_expression: ... case 1: block");
    break;}
case 74:
#line 301 "parse.y"
{dbg("case_expression: case 1:");
    break;}
case 75:
#line 302 "parse.y"
{dbg("case_expression: ... case 1:");
    break;}
case 76:
#line 309 "parse.y"
{dbg("if_operator: if (expression) block");
    break;}
case 77:
#line 310 "parse.y"
{dbg("if_operator: if (expression) single_stat_blck else single_stat_blck");
    break;}
case 78:
#line 318 "parse.y"
{dbg("var_init: var a...; (local variable)");
    break;}
case 79:
#line 319 "parse.y"
{dbg("var_init: a...; (global variable)");
    break;}
case 81:
#line 323 "parse.y"
{dbg("var: ...a");
    break;}
case 82:
#line 324 "parse.y"
{dbg("var: a = 0;");
    break;}
case 83:
#line 325 "parse.y"
{dbg("var: a = 0, ...");
    break;}
case 84:
#line 328 "parse.y"
{dbg("init_block: a : init_value");
    break;}
case 85:
#line 329 "parse.y"
{dbg("init_block: 'vara' : init_value");
    break;}
case 86:
#line 330 "parse.y"
{dbg("init_block: ['vara' + a] : init_value");
    break;}
case 87:
#line 331 "parse.y"
{dbg("init_block: ... obj(clone object)");
    break;}
case 94:
#line 339 "parse.y"
{dbg("init_block: ... , a : init_value");
    break;}
case 95:
#line 340 "parse.y"
{dbg("init_block: ... , 'vara' : init_value");
    break;}
case 96:
#line 341 "parse.y"
{dbg("init_block: ... , ['vara' + a] : init_value");
    break;}
case 97:
#line 342 "parse.y"
{dbg("init_block: ... , ...obj(clone object)");
    break;}
case 105:
#line 358 "parse.y"
{dbg("init_value: expression");
    break;}
case 106:
#line 359 "parse.y"
{dbg("init_value: function_expression");
    break;}
case 107:
#line 360 "parse.y"
{dbg("init_value: { init_block }");
    break;}
case 108:
#line 369 "parse.y"
{dbg("function: function literal_string (parameters) { func_body }");
    break;}
case 111:
#line 381 "parse.y"
{dbg("function: function func_name (parameters) { func_body }");
    break;}
case 112:
#line 382 "parse.y"
{dbg("function: (function func_name (parameters) { func_body }())");
    break;}
case 113:
#line 385 "parse.y"
{dbg("func_body: block");
    break;}
case 114:
#line 386 "parse.y"
{dbg("func_body: <nothing>");
    break;}
case 115:
#line 389 "parse.y"
{dbg("func_name: name");
    break;}
case 116:
#line 390 "parse.y"
{dbg("func_name: <nothing>");
    break;}
case 117:
#line 393 "parse.y"
{dbg("func_parameters: a");
    break;}
case 118:
#line 394 "parse.y"
{dbg("func_parameters: ... , a");
    break;}
case 119:
#line 395 "parse.y"
{dbg("func_parameters: <nothing>");
    break;}
case 120:
#line 409 "parse.y"
{dbgCoExpr("expression: assign_expression");
    break;}
case 121:
#line 410 "parse.y"
{dbgCoExpr("expression: shortened_expression");
    break;}
case 122:
#line 411 "parse.y"
{dbgCoExpr("expression: binary_expression");
    break;}
case 123:
#line 412 "parse.y"
{dbgCoExpr("expression: ternary_expression");
    break;}
case 124:
#line 413 "parse.y"
{dbgCoExpr("expression: unary_expression");
    break;}
case 125:
#line 414 "parse.y"
{dbgCoExpr("expression: new_expression");
    break;}
case 126:
#line 415 "parse.y"
{dbgCoExpr("expression: delete_expression");
    break;}
case 127:
#line 417 "parse.y"
{dbgCoExpr("expression: object");
    break;}
case 128:
#line 419 "parse.y"
{dbgCoExpr("expression: literal_number");
    break;}
case 129:
#line 422 "parse.y"
{dbgCoExpr("expression: empty_expression");
    break;}
case 130:
#line 424 "parse.y"
{dbgCoExpr("expression: useful_words");
    break;}
case 131:
#line 426 "parse.y"
{dbgCoExpr("expression: typeof_operator");
    break;}
case 132:
#line 428 "parse.y"
{dbgCoExpr("expression: this");
    break;}
case 133:
#line 430 "parse.y"
{dbgCoExpr("expression: object instanceof constructor");
    break;}
case 134:
#line 432 "parse.y"
{dbgCoExpr("expression: property in object");
    break;}
case 141:
#line 447 "parse.y"
{dbgCoExpr("expression: (a+0)");
    break;}
case 142:
#line 448 "parse.y"
{dbgCoExpr("expression: (a+0)");
    break;}
case 143:
#line 451 "parse.y"
{dbg("in_expression: 'propA' in object");
    break;}
case 144:
#line 455 "parse.y"
{dbg("typeof_operator: typeof expression");
    break;}
case 145:
#line 458 "parse.y"
{dbg("shortened_expression: a += a");
    break;}
case 146:
#line 459 "parse.y"
{dbg("shortened_expression: a -= a");
    break;}
case 147:
#line 460 "parse.y"
{dbg("shortened_expression: a *= a");
    break;}
case 148:
#line 461 "parse.y"
{dbg("shortened_expression: a **= a");
    break;}
case 149:
#line 462 "parse.y"
{dbg("shortened_expression: a /= a");
    break;}
case 150:
#line 463 "parse.y"
{dbg("shortened_expression: a %= a");
    break;}
case 151:
#line 464 "parse.y"
{dbg("shortened_expression: a >>= a, a >>>= a");
    break;}
case 152:
#line 465 "parse.y"
{dbg("shortened_expression: a <<= a, a <<<= a");
    break;}
case 153:
#line 466 "parse.y"
{dbg("shortened_expression: a &= a");
    break;}
case 154:
#line 467 "parse.y"
{dbg("shortened_expression: a ^= a");
    break;}
case 155:
#line 468 "parse.y"
{dbg("shortened_expression: a |= a");
    break;}
case 156:
#line 481 "parse.y"
{dbg("assign_expression: this.a = 0");
    break;}
case 157:
#line 482 "parse.y"
{dbg("assign_expression: this.a = function_expression");
    break;}
case 158:
#line 483 "parse.y"
{dbg("assign_expression: a = { init_block }");
    break;}
case 159:
#line 487 "parse.y"
{dbg("new_expression: new a()");
    break;}
case 161:
#line 493 "parse.y"
{dbg("empty_expression: ;");
    break;}
case 162:
#line 496 "parse.y"
{dbg("useful_words: null");
    break;}
case 163:
#line 497 "parse.y"
{dbg("useful_words: true");
    break;}
case 164:
#line 498 "parse.y"
{dbg("useful_words: false");
    break;}
case 165:
#line 499 "parse.y"
{dbg("useful_words: undefined");
    break;}
case 166:
#line 500 "parse.y"
{dbg("useful_words: NaN");
    break;}
case 167:
#line 501 "parse.y"
{dbg("useful_words: Infinity");
    break;}
case 168:
#line 505 "parse.y"
{dbg("unary_expression: ++ a");
    break;}
case 169:
#line 506 "parse.y"
{dbg("unary_expression: ++ (a)");
    break;}
case 170:
#line 507 "parse.y"
{dbg("unary_expression: -- a");
    break;}
case 171:
#line 508 "parse.y"
{dbg("unary_expression: -- (a)");
    break;}
case 172:
#line 513 "parse.y"
{dbg("unary_expression: a ++");
    break;}
case 173:
#line 515 "parse.y"
{dbg("unary_expression: a --");
    break;}
case 174:
#line 517 "parse.y"
{dbg("unary_expression: !a");
    break;}
case 175:
#line 520 "parse.y"
{dbg("binary_expression: a * a");
    break;}
case 176:
#line 521 "parse.y"
{dbg("binary_expression: a / a");
    break;}
case 177:
#line 522 "parse.y"
{dbg("binary_expression: a % a");
    break;}
case 178:
#line 523 "parse.y"
{dbg("binary_expression: a - a");
    break;}
case 179:
#line 524 "parse.y"
{dbg("binary_expression: a + a");
    break;}
case 180:
#line 526 "parse.y"
{dbg("binary_expression: a && a");
    break;}
case 181:
#line 527 "parse.y"
{dbg("binary_expression: a || a");
    break;}
case 182:
#line 528 "parse.y"
{dbg("binary_expression: a == a, a === a");
    break;}
case 183:
#line 529 "parse.y"
{dbg("binary_expression: a != a, a !== a");
    break;}
case 184:
#line 530 "parse.y"
{dbg("binary_expression: a < a");
    break;}
case 185:
#line 531 "parse.y"
{dbg("binary_expression: a > a");
    break;}
case 186:
#line 532 "parse.y"
{dbg("binary_expression: a <= a");
    break;}
case 187:
#line 533 "parse.y"
{dbg("binary_expression: a >= a");
    break;}
case 188:
#line 535 "parse.y"
{dbg("binary_expression: a & a");
    break;}
case 189:
#line 536 "parse.y"
{dbg("binary_expression: a | a");
    break;}
case 190:
#line 537 "parse.y"
{dbg("binary_expression: a ^ a");
    break;}
case 191:
#line 538 "parse.y"
{dbg("binary_expression: a << a, a <<< a");
    break;}
case 192:
#line 539 "parse.y"
{dbg("binary_expression: a >> a, a >>> a");
    break;}
case 193:
#line 542 "parse.y"
{dbg("ternary_expression: (a > 0) ? 1 : 0");
    break;}
case 194:
#line 547 "parse.y"
{dbg("parameters: 1");
    break;}
case 195:
#line 548 "parse.y"
{dbg("parameters: function_expression");
    break;}
case 196:
#line 549 "parse.y"
{dbg("parameters: { init_block }");
    break;}
case 197:
#line 551 "parse.y"
{dbg("parameters: ... , 1");
    break;}
case 198:
#line 552 "parse.y"
{dbg("parameters: ... , function_expression");
    break;}
case 199:
#line 553 "parse.y"
{dbg("parameters: ... , { init_block }");
    break;}
case 200:
#line 556 "parse.y"
{dbg("object: ... ( parameters )");
    break;}
case 201:
#line 558 "parse.y"
{dbg("object: ... [ parameters ]");
    break;}
case 206:
#line 563 "parse.y"
{dbg("object: a");
    break;}
case 207:
#line 564 "parse.y"
{dbg("object: ... .a");
    break;}
case 208:
#line 565 "parse.y"
{dbg("object: this.a");
    break;}
case 211:
#line 577 "parse.y"
{dbg("Literal string")	;
    break;}
case 212:
#line 578 "parse.y"
{dbg("Constant string");;
    break;}
case 213:
#line 579 "parse.y"
{dbg("Literal number")	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 583 "parse.y"


void yyYaccInit() {}
void yyYaccCleanup() {}